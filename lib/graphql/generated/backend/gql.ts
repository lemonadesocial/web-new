/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query GetEvent($id: MongoID, $shortid: String) {\n  getEvent(_id: $id, shortid: $shortid) {\n    _id\n    title\n    description\n    approval_required\n    start\n    end\n    shortid\n    host\n    cohosts\n    host_expanded {\n      ...User\n    }\n    visible_cohosts_expanded {\n      ...User\n    }\n    accepted\n    new_new_photos_expanded {\n      _id\n      stamp\n      type\n      url\n      size\n      bucket\n      key\n    }\n    address {\n      street_1\n      city\n      title\n      region\n      country\n      additional_directions\n      latitude\n      longitude\n    }\n    address_directions\n    subevent_enabled\n    sessions {\n      _id\n      start\n      end\n      broadcast\n      description\n      title\n      broadcast\n      photos_expanded {\n        _id\n        key\n        bucket\n      }\n      speaker_users\n      speaker_users_expanded {\n        ...User\n      }\n    }\n    space\n    timezone\n    application_questions {\n      _id\n      question\n      required\n      position\n      type\n      options\n      select_type\n    }\n    application_profile_fields {\n      field\n      required\n    }\n    rsvp_wallet_platforms {\n      platform\n      required\n    }\n    calendar_links {\n      google\n      ical\n      outlook\n      yahoo\n    }\n    offers {\n      _id\n      provider\n      provider_id\n      provider_network\n    }\n    event_ticket_types {\n      _id\n      offers {\n        _id\n        provider_network\n        provider_id\n        provider\n      }\n    }\n    guest_limit\n    terms_text\n    virtual\n    virtual_url\n    theme_data\n    url\n    url_go\n    external_url\n    external_hostname\n  }\n}\n\nquery GetEvents($subeventParent: MongoID, $skip: Int = 0, $limit: Int = 100, $id: [MongoID!], $site: MongoID, $search: String, $accepted: MongoID, $highlight: Boolean, $unpublished: Boolean, $startFrom: DateTimeISO, $startTo: DateTimeISO, $endFrom: DateTimeISO, $hostFilter: HostFilter, $sort: EventSortInput) {\n  getEvents(\n    subevent_parent: $subeventParent\n    skip: $skip\n    limit: $limit\n    _id: $id\n    site: $site\n    search: $search\n    accepted: $accepted\n    highlight: $highlight\n    unpublished: $unpublished\n    start_from: $startFrom\n    start_to: $startTo\n    end_from: $endFrom\n    host_filter: $hostFilter\n    sort: $sort\n  ) {\n    _id\n    shortid\n    title\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    cohosts_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      url\n      type\n    }\n    start\n    end\n    timezone\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    broadcasts {\n      provider_id\n    }\n    address {\n      title\n      city\n      title\n      region\n      additional_directions\n    }\n    accepted\n    sessions {\n      _id\n      broadcast\n      description\n      end\n      speaker_users\n      speaker_users_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      start\n      title\n    }\n    subevent_parent_expanded {\n      _id\n      shortid\n      title\n      slug\n      start\n      timezone\n      new_new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n        type\n        url\n      }\n      subevent_settings {\n        ticket_required_for_creation\n        ticket_required_for_purchase\n      }\n    }\n  }\n}\n\nquery GetUpcomingEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $host: Boolean, $sort: JSON, $site: MongoID, $unpublished: Boolean) {\n  events: getUpcomingEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    host: $host\n    sort: $sort\n    site: $site\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery GetPastEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $sort: JSON, $site: MongoID, $host: Boolean, $unpublished: Boolean) {\n  events: getPastEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    sort: $sort\n    site: $site\n    host: $host\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery getEventInvitation($event: MongoID!) {\n  getEventInvitation(event: $event) {\n    _id\n    inviters\n  }\n}\n\nquery GetEventTicketTypes($input: GetEventTicketTypesInput!) {\n  getEventTicketTypes(input: $input) {\n    ticket_types {\n      _id\n      title\n      default\n      description\n      event\n      limited\n      limit\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n      whitelisted\n      photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n      category\n      category_expanded {\n        _id\n        description\n        title\n        position\n      }\n      position\n    }\n  }\n}\n\nquery getMyEventJoinRequest($event: MongoID!) {\n  getMyEventJoinRequest(event: $event) {\n    _id\n    created_at\n    decided_at\n    decided_by\n    decided_by_expanded {\n      _id\n      display_name\n      image_avatar\n      username\n      wallets\n    }\n    state\n    payment {\n      _id\n      state\n    }\n    requested_tickets {\n      count\n      ticket_type\n    }\n    ticket_types_expanded {\n      _id\n      title\n    }\n  }\n}\n\nmutation acceptEvent($id: MongoID!, $email: String) {\n  acceptEvent(_id: $id, email: $email) {\n    state\n  }\n}\n\nmutation SubmitEventApplicationAnswers($answers: [EventApplicationAnswerInput!]!, $event: MongoID!, $email: String) {\n  submitEventApplicationAnswers(answers: $answers, event: $event, email: $email)\n}\n\nquery PeekEventGuests($id: MongoID!, $limit: Int) {\n  peekEventGuests(_id: $id, limit: $limit) {\n    items {\n      _id\n      image_avatar\n      name\n      display_name\n      first_name\n    }\n    total\n  }\n}\n\nmutation UpdateEventTheme($id: MongoID!, $input: EventInput!) {\n  updateEvent(_id: $id, input: $input) {\n    _id\n    theme_data\n  }\n}\n\nquery GetEventCohostInvites($input: GetEventCohostRequestsInput!) {\n  getEventCohostInvites(input: $input) {\n    event\n    from_expanded {\n      _id\n      name\n    }\n  }\n}\n\nmutation DecideEventCohostRequest($input: DecideEventCohostRequestInput!) {\n  decideEventCohostRequest(input: $input)\n}\n\nmutation createEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n    shortid\n  }\n}": typeof types.GetEventDocument,
    "query GetSystemFiles($categories: [FileCategory!]) {\n  getSystemFiles(categories: $categories) {\n    _id\n    name\n    category\n    url\n    type\n    bucket\n    key\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}\n\nmutation confirmFileUploads($ids: [MongoID!]!) {\n  confirmFileUploads(ids: $ids)\n}\n\nmutation updateFileDescriptionMutation($input: FileInput!, $id: MongoID!) {\n  updateFile(input: $input, _id: $id) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    description\n  }\n}": typeof types.GetSystemFilesDocument,
    "fragment User on User {\n  _id\n  name\n  display_name\n  first_name\n  last_name\n  username\n  description\n  job_title\n  company_name\n  addresses {\n    _id\n    street_1\n    street_2\n    city\n    region\n    postal\n    country\n    title\n    phone\n    longitude\n    latitude\n    additional_directions\n  }\n  icebreakers {\n    _id\n    value\n    question_expanded {\n      _id\n      title\n    }\n  }\n  handle_facebook\n  handle_instagram\n  handle_linkedin\n  handle_twitter\n  handle_farcaster\n  handle_github\n  pronoun\n  calendly_url\n  website\n  new_photos_expanded(limit: 1) {\n    _id\n    key\n    bucket\n  }\n  url\n  url_go\n  lens_profile_synced\n}\n\nfragment PaymentAccount on NewPaymentAccount {\n  _id\n  provider\n  type\n  title\n  account_info {\n    ... on EthereumAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n    ... on SafeAccount {\n      currencies\n      currency_map\n      address\n      network\n      owners\n      threshold\n      pending\n    }\n    ... on DigitalAccount {\n      currencies\n      currency_map\n      account_id\n    }\n    ... on StripeAccount {\n      currencies\n      currency_map\n      account_id\n      publishable_key\n    }\n    ... on EthereumEscrowAccount {\n      currencies\n      currency_map\n      address\n      network\n      minimum_deposit_percent\n      host_refund_percent\n      refund_policies {\n        percent\n        timestamp\n      }\n    }\n    ... on EthereumRelayAccount {\n      currencies\n      currency_map\n      address\n      network\n      payment_splitter_contract\n    }\n    ... on EthereumStakeAccount {\n      currencies\n      currency_map\n      address\n      network\n      config_id\n      requirement_checkin_before\n    }\n    ... on SolanaAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n  }\n}": typeof types.UserFragmentDoc,
    "query listChains {\n  listChains {\n    active\n    platform\n    chain_id\n    name\n    code_name\n    rpc_url\n    block_explorer_url\n    block_explorer_name\n    block_explorer_for_tx\n    block_explorer_for_token\n    block_explorer_for_address\n    block_time\n    safe_confirmations\n    logo_url\n    tokens {\n      active\n      name\n      symbol\n      decimals\n      contract\n      logo_url\n      is_native\n    }\n    access_registry_contract\n    poap_contract\n    marketplace_contract\n    marketplace_version\n    biconomy_api_key\n    ens_registry\n    proxy_admin_contract\n    payment_config_registry_contract\n    escrow_manager_contract\n    relay_payment_contract\n    stake_payment_contract\n    reward_registry_contract\n    eas_event_contract\n    eas_graphql_url\n    aragon_network\n    axelar_chain_name\n    donation_registry_contract\n    lemonhead_contract_address\n  }\n}\n\nquery GetUserWalletRequest($wallet: String!) {\n  getUserWalletRequest(wallet: $wallet) {\n    message\n    token\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}": typeof types.ListChainsDocument,
    "mutation createStripeCard($paymentMethod: String!) {\n  createStripeCard(payment_method: $paymentMethod) {\n    _id\n    provider_id\n  }\n}\n\nquery getStripeCards {\n  getStripeCards {\n    _id\n    active\n    brand\n    last4\n    name\n    provider_id\n    stamp\n    user\n  }\n}\n\nmutation updatePayment($input: UpdatePaymentInput!) {\n  updatePayment(input: $input) {\n    _id\n    transfer_metadata\n    state\n    failure_reason\n  }\n}\n\nquery getNewPayment($id: MongoID!, $paymentSecret: String) {\n  getNewPayment(_id: $id, payment_secret: $paymentSecret) {\n    _id\n    due_amount\n    amount\n    currency\n    ref_data\n    state\n    failure_reason\n    account_expanded {\n      _id\n      type\n      account_info {\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getPaymentRefundSignature($id: MongoID!) {\n  getPaymentRefundSignature(_id: $id) {\n    args\n    signature\n  }\n}": typeof types.CreateStripeCardDocument,
    "fragment Space on Space {\n  _id\n  title\n  admins {\n    _id\n    image_avatar\n  }\n  description\n  is_ambassador\n  followed\n  followers\n  image_avatar\n  image_avatar_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  image_cover\n  image_cover_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  creator\n  creator_expanded {\n    _id\n    name\n    image_avatar\n  }\n  slug\n  private\n  listed_events\n  website\n  address {\n    _id\n    city\n    country\n    latitude\n    longitude\n    street_1\n    street_2\n    region\n    title\n  }\n  handle_instagram\n  handle_twitter\n  handle_linkedin\n  handle_youtube\n  handle_tiktok\n  personal\n  theme_data\n  sub_spaces\n  lens_feed_id\n}\n\nfragment SpaceTagFragment on SpaceTag {\n  _id\n  color\n  space\n  tag\n  targets\n  type\n}\n\nfragment SpaceEventRequestFragment on SpaceEventRequest {\n  _id\n  created_at\n  space\n  event\n  state\n  decided_at\n  decided_by\n}\n\nquery GetSpaces($with_my_spaces: Boolean, $with_public_spaces: Boolean, $roles: [SpaceRole!], $featured: Boolean) {\n  listSpaces(\n    with_my_spaces: $with_my_spaces\n    with_public_spaces: $with_public_spaces\n    roles: $roles\n    featured: $featured\n  ) {\n    ...Space\n  }\n}\n\nquery GetSpace($id: MongoID, $slug: String, $hostname: String) {\n  getSpace(_id: $id, slug: $slug, hostname: $hostname) {\n    ...Space\n  }\n}\n\nquery GetSpaceEvents($skip: Int, $limit: Int, $startFrom: DateTimeISO, $startTo: DateTimeISO, $space: MongoID, $sort: EventSortInput, $endFrom: DateTimeISO, $endTo: DateTimeISO, $spaceTags: [MongoID!]) {\n  getEvents(\n    skip: $skip\n    limit: $limit\n    start_from: $startFrom\n    start_to: $startTo\n    space: $space\n    sort: $sort\n    end_from: $endFrom\n    end_to: $endTo\n    space_tags: $spaceTags\n  ) {\n    _id\n    shortid\n    title\n    host_expanded {\n      _id\n      image_avatar\n      name\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n      name\n    }\n    address {\n      city\n      country\n      region\n      latitude\n      longitude\n    }\n    new_new_photos_expanded {\n      _id\n      bucket\n      key\n      type\n      url\n    }\n    start\n    end\n    timezone\n    external_url\n    external_hostname\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    host_expanded {\n      _id\n      image_avatar\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n    }\n  }\n}\n\nquery GetSpaceEventsCalendar($space: MongoID) {\n  getEvents(space: $space) {\n    _id\n    start\n    address {\n      _id\n      latitude\n      longitude\n    }\n  }\n}\n\nquery GetSpaceTags($space: MongoID!) {\n  listSpaceTags(space: $space) {\n    ...SpaceTagFragment\n  }\n}\n\nquery GetSpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getSpaceEventRequests(space: $space, skip: $skip, limit: $limit, state: $state) {\n    records {\n      _id\n      created_at\n      space\n      event\n      state\n      decided_at\n      decided_by\n      event_expanded {\n        title\n        start\n        address {\n          city\n          country\n          region\n        }\n        new_new_photos_expanded {\n          _id\n          bucket\n          key\n          type\n          url\n        }\n      }\n    }\n    total\n  }\n}\n\nquery GetMySpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getMySpaceEventRequests(\n    space: $space\n    skip: $skip\n    limit: $limit\n    state: $state\n  ) {\n    records {\n      _id\n      state\n      event_expanded {\n        _id\n        title\n        new_new_photos_expanded {\n          key\n          bucket\n          _id\n          url\n          type\n        }\n      }\n    }\n  }\n}\n\nquery getSubSpaces($id: MongoID!) {\n  getSubSpaces(_id: $id) {\n    _id\n    title\n    description\n    followers_count\n    slug\n    is_admin\n    followed\n    image_avatar_expanded {\n      _id\n      bucket\n      url\n      type\n      key\n    }\n  }\n}\n\nquery GetListSpaceCategories {\n  listSpaceCategories {\n    description\n    image_url\n    listed_events_count\n    space\n    title\n  }\n}\n\nquery GetListGeoRegions {\n  listGeoRegions {\n    _id\n    title\n    cities {\n      name\n      region\n      space\n      icon_url\n      listed_events_count\n    }\n  }\n}\n\nmutation FollowSpace($space: MongoID!) {\n  followSpace(space: $space)\n}\n\nmutation UnfollowSpace($space: MongoID!) {\n  unfollowSpace(space: $space)\n}\n\nmutation UpdateSpace($id: MongoID!, $input: SpaceInput!) {\n  updateSpace(_id: $id, input: $input) {\n    ...Space\n  }\n}\n\nmutation PinEventsToSpace($space: MongoID!, $events: [MongoID!]!, $tags: [MongoID!]) {\n  pinEventsToSpace(space: $space, events: $events, tags: $tags) {\n    requests {\n      ...SpaceEventRequestFragment\n    }\n  }\n}\n\nmutation CreateExternalEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n  }\n}": typeof types.SpaceFragmentDoc,
    "query CalculateTicketsPricing($input: CalculateTicketsPricingInput!) {\n  calculateTicketsPricing(input: $input) {\n    deposit_infos {\n      minimum_amount\n      minimum_percent\n    }\n    discount\n    payment_accounts {\n      _id\n      account_info {\n        ... on SolanaAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on EthereumAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on SafeAccount {\n          currencies\n          currency_map\n          address\n          network\n          owners\n          threshold\n          pending\n        }\n        ... on DigitalAccount {\n          currencies\n          currency_map\n          account_id\n        }\n        ... on StripeAccount {\n          currencies\n          currency_map\n          account_id\n          publishable_key\n        }\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n        ... on EthereumRelayAccount {\n          currencies\n          currency_map\n          address\n          network\n          payment_splitter_contract\n        }\n        ... on EthereumStakeAccount {\n          currencies\n          currency_map\n          address\n          network\n          config_id\n          requirement_checkin_before\n        }\n      }\n      active\n      created_at\n      escrow {\n        minimum_amount\n        minimum_percent\n      }\n      fee\n      provider\n      relay {\n        payment_splitter_contract\n      }\n      title\n      type\n      user\n    }\n    subtotal\n    total\n  }\n}\n\nquery getMyTickets($event: MongoID!, $withPaymentInfo: Boolean) {\n  getMyTickets(event: $event, with_payment_info: $withPaymentInfo) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      assigned_to_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      event\n      invited_by\n      type\n      type_expanded {\n        _id\n        title\n        prices {\n          cost\n          currency\n          default\n          payment_accounts\n          payment_accounts_expanded {\n            ...PaymentAccount\n          }\n        }\n      }\n      shortid\n      event_expanded {\n        _id\n        title\n      }\n    }\n    payments {\n      _id\n      state\n      amount\n      attempting_refund\n      currency\n      refund_info {\n        available_amount\n        refunded\n      }\n      refund_policy {\n        percent\n        requirements {\n          checkin_before\n        }\n        satisfy_all\n      }\n      refund_requirements_met\n      payment_account {\n        _id\n        account_info {\n          ... on EthereumStakeAccount {\n            currencies\n            currency_map\n            address\n            network\n            config_id\n            requirement_checkin_before\n          }\n        }\n        type\n      }\n    }\n  }\n}\n\nmutation redeemTickets($event: MongoID!, $items: [PurchasableItem!]!, $buyer_info: BuyerInfoInput, $inviter: MongoID, $user_info: UserInput, $connect_wallets: [ConnectWalletInput!]) {\n  redeemTickets(\n    input: {event: $event, items: $items, buyer_info: $buyer_info, inviter: $inviter, user_info: $user_info, connect_wallets: $connect_wallets}\n  ) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}\n\nmutation AssignTickets($input: AssignTicketsInput!) {\n  assignTickets(input: $input)\n}\n\nmutation buyTickets($input: BuyTicketsInput!) {\n  buyTickets(input: $input) {\n    payment {\n      _id\n      failure_reason\n      state\n      stamps\n      transfer_metadata\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}": typeof types.CalculateTicketsPricingDocument,
    "query GetMe {\n  getMe {\n    ...User\n    email\n    wallets_new\n    wallet_custodial\n    email_verified\n  }\n}\n\nmutation SetUserWallet($token: String!, $signature: String!) {\n  setUserWallet(token: $token, signature: $signature)\n}\n\nmutation UpdateUser($input: UserInput!) {\n  updateUser(input: $input) {\n    ...User\n  }\n}": typeof types.GetMeDocument,
};
const documents: Documents = {
    "query GetEvent($id: MongoID, $shortid: String) {\n  getEvent(_id: $id, shortid: $shortid) {\n    _id\n    title\n    description\n    approval_required\n    start\n    end\n    shortid\n    host\n    cohosts\n    host_expanded {\n      ...User\n    }\n    visible_cohosts_expanded {\n      ...User\n    }\n    accepted\n    new_new_photos_expanded {\n      _id\n      stamp\n      type\n      url\n      size\n      bucket\n      key\n    }\n    address {\n      street_1\n      city\n      title\n      region\n      country\n      additional_directions\n      latitude\n      longitude\n    }\n    address_directions\n    subevent_enabled\n    sessions {\n      _id\n      start\n      end\n      broadcast\n      description\n      title\n      broadcast\n      photos_expanded {\n        _id\n        key\n        bucket\n      }\n      speaker_users\n      speaker_users_expanded {\n        ...User\n      }\n    }\n    space\n    timezone\n    application_questions {\n      _id\n      question\n      required\n      position\n      type\n      options\n      select_type\n    }\n    application_profile_fields {\n      field\n      required\n    }\n    rsvp_wallet_platforms {\n      platform\n      required\n    }\n    calendar_links {\n      google\n      ical\n      outlook\n      yahoo\n    }\n    offers {\n      _id\n      provider\n      provider_id\n      provider_network\n    }\n    event_ticket_types {\n      _id\n      offers {\n        _id\n        provider_network\n        provider_id\n        provider\n      }\n    }\n    guest_limit\n    terms_text\n    virtual\n    virtual_url\n    theme_data\n    url\n    url_go\n    external_url\n    external_hostname\n  }\n}\n\nquery GetEvents($subeventParent: MongoID, $skip: Int = 0, $limit: Int = 100, $id: [MongoID!], $site: MongoID, $search: String, $accepted: MongoID, $highlight: Boolean, $unpublished: Boolean, $startFrom: DateTimeISO, $startTo: DateTimeISO, $endFrom: DateTimeISO, $hostFilter: HostFilter, $sort: EventSortInput) {\n  getEvents(\n    subevent_parent: $subeventParent\n    skip: $skip\n    limit: $limit\n    _id: $id\n    site: $site\n    search: $search\n    accepted: $accepted\n    highlight: $highlight\n    unpublished: $unpublished\n    start_from: $startFrom\n    start_to: $startTo\n    end_from: $endFrom\n    host_filter: $hostFilter\n    sort: $sort\n  ) {\n    _id\n    shortid\n    title\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    cohosts_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      url\n      type\n    }\n    start\n    end\n    timezone\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    broadcasts {\n      provider_id\n    }\n    address {\n      title\n      city\n      title\n      region\n      additional_directions\n    }\n    accepted\n    sessions {\n      _id\n      broadcast\n      description\n      end\n      speaker_users\n      speaker_users_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      start\n      title\n    }\n    subevent_parent_expanded {\n      _id\n      shortid\n      title\n      slug\n      start\n      timezone\n      new_new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n        type\n        url\n      }\n      subevent_settings {\n        ticket_required_for_creation\n        ticket_required_for_purchase\n      }\n    }\n  }\n}\n\nquery GetUpcomingEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $host: Boolean, $sort: JSON, $site: MongoID, $unpublished: Boolean) {\n  events: getUpcomingEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    host: $host\n    sort: $sort\n    site: $site\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery GetPastEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $sort: JSON, $site: MongoID, $host: Boolean, $unpublished: Boolean) {\n  events: getPastEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    sort: $sort\n    site: $site\n    host: $host\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery getEventInvitation($event: MongoID!) {\n  getEventInvitation(event: $event) {\n    _id\n    inviters\n  }\n}\n\nquery GetEventTicketTypes($input: GetEventTicketTypesInput!) {\n  getEventTicketTypes(input: $input) {\n    ticket_types {\n      _id\n      title\n      default\n      description\n      event\n      limited\n      limit\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n      whitelisted\n      photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n      category\n      category_expanded {\n        _id\n        description\n        title\n        position\n      }\n      position\n    }\n  }\n}\n\nquery getMyEventJoinRequest($event: MongoID!) {\n  getMyEventJoinRequest(event: $event) {\n    _id\n    created_at\n    decided_at\n    decided_by\n    decided_by_expanded {\n      _id\n      display_name\n      image_avatar\n      username\n      wallets\n    }\n    state\n    payment {\n      _id\n      state\n    }\n    requested_tickets {\n      count\n      ticket_type\n    }\n    ticket_types_expanded {\n      _id\n      title\n    }\n  }\n}\n\nmutation acceptEvent($id: MongoID!, $email: String) {\n  acceptEvent(_id: $id, email: $email) {\n    state\n  }\n}\n\nmutation SubmitEventApplicationAnswers($answers: [EventApplicationAnswerInput!]!, $event: MongoID!, $email: String) {\n  submitEventApplicationAnswers(answers: $answers, event: $event, email: $email)\n}\n\nquery PeekEventGuests($id: MongoID!, $limit: Int) {\n  peekEventGuests(_id: $id, limit: $limit) {\n    items {\n      _id\n      image_avatar\n      name\n      display_name\n      first_name\n    }\n    total\n  }\n}\n\nmutation UpdateEventTheme($id: MongoID!, $input: EventInput!) {\n  updateEvent(_id: $id, input: $input) {\n    _id\n    theme_data\n  }\n}\n\nquery GetEventCohostInvites($input: GetEventCohostRequestsInput!) {\n  getEventCohostInvites(input: $input) {\n    event\n    from_expanded {\n      _id\n      name\n    }\n  }\n}\n\nmutation DecideEventCohostRequest($input: DecideEventCohostRequestInput!) {\n  decideEventCohostRequest(input: $input)\n}\n\nmutation createEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n    shortid\n  }\n}": types.GetEventDocument,
    "query GetSystemFiles($categories: [FileCategory!]) {\n  getSystemFiles(categories: $categories) {\n    _id\n    name\n    category\n    url\n    type\n    bucket\n    key\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}\n\nmutation confirmFileUploads($ids: [MongoID!]!) {\n  confirmFileUploads(ids: $ids)\n}\n\nmutation updateFileDescriptionMutation($input: FileInput!, $id: MongoID!) {\n  updateFile(input: $input, _id: $id) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    description\n  }\n}": types.GetSystemFilesDocument,
    "fragment User on User {\n  _id\n  name\n  display_name\n  first_name\n  last_name\n  username\n  description\n  job_title\n  company_name\n  addresses {\n    _id\n    street_1\n    street_2\n    city\n    region\n    postal\n    country\n    title\n    phone\n    longitude\n    latitude\n    additional_directions\n  }\n  icebreakers {\n    _id\n    value\n    question_expanded {\n      _id\n      title\n    }\n  }\n  handle_facebook\n  handle_instagram\n  handle_linkedin\n  handle_twitter\n  handle_farcaster\n  handle_github\n  pronoun\n  calendly_url\n  website\n  new_photos_expanded(limit: 1) {\n    _id\n    key\n    bucket\n  }\n  url\n  url_go\n  lens_profile_synced\n}\n\nfragment PaymentAccount on NewPaymentAccount {\n  _id\n  provider\n  type\n  title\n  account_info {\n    ... on EthereumAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n    ... on SafeAccount {\n      currencies\n      currency_map\n      address\n      network\n      owners\n      threshold\n      pending\n    }\n    ... on DigitalAccount {\n      currencies\n      currency_map\n      account_id\n    }\n    ... on StripeAccount {\n      currencies\n      currency_map\n      account_id\n      publishable_key\n    }\n    ... on EthereumEscrowAccount {\n      currencies\n      currency_map\n      address\n      network\n      minimum_deposit_percent\n      host_refund_percent\n      refund_policies {\n        percent\n        timestamp\n      }\n    }\n    ... on EthereumRelayAccount {\n      currencies\n      currency_map\n      address\n      network\n      payment_splitter_contract\n    }\n    ... on EthereumStakeAccount {\n      currencies\n      currency_map\n      address\n      network\n      config_id\n      requirement_checkin_before\n    }\n    ... on SolanaAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n  }\n}": types.UserFragmentDoc,
    "query listChains {\n  listChains {\n    active\n    platform\n    chain_id\n    name\n    code_name\n    rpc_url\n    block_explorer_url\n    block_explorer_name\n    block_explorer_for_tx\n    block_explorer_for_token\n    block_explorer_for_address\n    block_time\n    safe_confirmations\n    logo_url\n    tokens {\n      active\n      name\n      symbol\n      decimals\n      contract\n      logo_url\n      is_native\n    }\n    access_registry_contract\n    poap_contract\n    marketplace_contract\n    marketplace_version\n    biconomy_api_key\n    ens_registry\n    proxy_admin_contract\n    payment_config_registry_contract\n    escrow_manager_contract\n    relay_payment_contract\n    stake_payment_contract\n    reward_registry_contract\n    eas_event_contract\n    eas_graphql_url\n    aragon_network\n    axelar_chain_name\n    donation_registry_contract\n    lemonhead_contract_address\n  }\n}\n\nquery GetUserWalletRequest($wallet: String!) {\n  getUserWalletRequest(wallet: $wallet) {\n    message\n    token\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}": types.ListChainsDocument,
    "mutation createStripeCard($paymentMethod: String!) {\n  createStripeCard(payment_method: $paymentMethod) {\n    _id\n    provider_id\n  }\n}\n\nquery getStripeCards {\n  getStripeCards {\n    _id\n    active\n    brand\n    last4\n    name\n    provider_id\n    stamp\n    user\n  }\n}\n\nmutation updatePayment($input: UpdatePaymentInput!) {\n  updatePayment(input: $input) {\n    _id\n    transfer_metadata\n    state\n    failure_reason\n  }\n}\n\nquery getNewPayment($id: MongoID!, $paymentSecret: String) {\n  getNewPayment(_id: $id, payment_secret: $paymentSecret) {\n    _id\n    due_amount\n    amount\n    currency\n    ref_data\n    state\n    failure_reason\n    account_expanded {\n      _id\n      type\n      account_info {\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getPaymentRefundSignature($id: MongoID!) {\n  getPaymentRefundSignature(_id: $id) {\n    args\n    signature\n  }\n}": types.CreateStripeCardDocument,
    "fragment Space on Space {\n  _id\n  title\n  admins {\n    _id\n    image_avatar\n  }\n  description\n  is_ambassador\n  followed\n  followers\n  image_avatar\n  image_avatar_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  image_cover\n  image_cover_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  creator\n  creator_expanded {\n    _id\n    name\n    image_avatar\n  }\n  slug\n  private\n  listed_events\n  website\n  address {\n    _id\n    city\n    country\n    latitude\n    longitude\n    street_1\n    street_2\n    region\n    title\n  }\n  handle_instagram\n  handle_twitter\n  handle_linkedin\n  handle_youtube\n  handle_tiktok\n  personal\n  theme_data\n  sub_spaces\n  lens_feed_id\n}\n\nfragment SpaceTagFragment on SpaceTag {\n  _id\n  color\n  space\n  tag\n  targets\n  type\n}\n\nfragment SpaceEventRequestFragment on SpaceEventRequest {\n  _id\n  created_at\n  space\n  event\n  state\n  decided_at\n  decided_by\n}\n\nquery GetSpaces($with_my_spaces: Boolean, $with_public_spaces: Boolean, $roles: [SpaceRole!], $featured: Boolean) {\n  listSpaces(\n    with_my_spaces: $with_my_spaces\n    with_public_spaces: $with_public_spaces\n    roles: $roles\n    featured: $featured\n  ) {\n    ...Space\n  }\n}\n\nquery GetSpace($id: MongoID, $slug: String, $hostname: String) {\n  getSpace(_id: $id, slug: $slug, hostname: $hostname) {\n    ...Space\n  }\n}\n\nquery GetSpaceEvents($skip: Int, $limit: Int, $startFrom: DateTimeISO, $startTo: DateTimeISO, $space: MongoID, $sort: EventSortInput, $endFrom: DateTimeISO, $endTo: DateTimeISO, $spaceTags: [MongoID!]) {\n  getEvents(\n    skip: $skip\n    limit: $limit\n    start_from: $startFrom\n    start_to: $startTo\n    space: $space\n    sort: $sort\n    end_from: $endFrom\n    end_to: $endTo\n    space_tags: $spaceTags\n  ) {\n    _id\n    shortid\n    title\n    host_expanded {\n      _id\n      image_avatar\n      name\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n      name\n    }\n    address {\n      city\n      country\n      region\n      latitude\n      longitude\n    }\n    new_new_photos_expanded {\n      _id\n      bucket\n      key\n      type\n      url\n    }\n    start\n    end\n    timezone\n    external_url\n    external_hostname\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    host_expanded {\n      _id\n      image_avatar\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n    }\n  }\n}\n\nquery GetSpaceEventsCalendar($space: MongoID) {\n  getEvents(space: $space) {\n    _id\n    start\n    address {\n      _id\n      latitude\n      longitude\n    }\n  }\n}\n\nquery GetSpaceTags($space: MongoID!) {\n  listSpaceTags(space: $space) {\n    ...SpaceTagFragment\n  }\n}\n\nquery GetSpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getSpaceEventRequests(space: $space, skip: $skip, limit: $limit, state: $state) {\n    records {\n      _id\n      created_at\n      space\n      event\n      state\n      decided_at\n      decided_by\n      event_expanded {\n        title\n        start\n        address {\n          city\n          country\n          region\n        }\n        new_new_photos_expanded {\n          _id\n          bucket\n          key\n          type\n          url\n        }\n      }\n    }\n    total\n  }\n}\n\nquery GetMySpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getMySpaceEventRequests(\n    space: $space\n    skip: $skip\n    limit: $limit\n    state: $state\n  ) {\n    records {\n      _id\n      state\n      event_expanded {\n        _id\n        title\n        new_new_photos_expanded {\n          key\n          bucket\n          _id\n          url\n          type\n        }\n      }\n    }\n  }\n}\n\nquery getSubSpaces($id: MongoID!) {\n  getSubSpaces(_id: $id) {\n    _id\n    title\n    description\n    followers_count\n    slug\n    is_admin\n    followed\n    image_avatar_expanded {\n      _id\n      bucket\n      url\n      type\n      key\n    }\n  }\n}\n\nquery GetListSpaceCategories {\n  listSpaceCategories {\n    description\n    image_url\n    listed_events_count\n    space\n    title\n  }\n}\n\nquery GetListGeoRegions {\n  listGeoRegions {\n    _id\n    title\n    cities {\n      name\n      region\n      space\n      icon_url\n      listed_events_count\n    }\n  }\n}\n\nmutation FollowSpace($space: MongoID!) {\n  followSpace(space: $space)\n}\n\nmutation UnfollowSpace($space: MongoID!) {\n  unfollowSpace(space: $space)\n}\n\nmutation UpdateSpace($id: MongoID!, $input: SpaceInput!) {\n  updateSpace(_id: $id, input: $input) {\n    ...Space\n  }\n}\n\nmutation PinEventsToSpace($space: MongoID!, $events: [MongoID!]!, $tags: [MongoID!]) {\n  pinEventsToSpace(space: $space, events: $events, tags: $tags) {\n    requests {\n      ...SpaceEventRequestFragment\n    }\n  }\n}\n\nmutation CreateExternalEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n  }\n}": types.SpaceFragmentDoc,
    "query CalculateTicketsPricing($input: CalculateTicketsPricingInput!) {\n  calculateTicketsPricing(input: $input) {\n    deposit_infos {\n      minimum_amount\n      minimum_percent\n    }\n    discount\n    payment_accounts {\n      _id\n      account_info {\n        ... on SolanaAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on EthereumAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on SafeAccount {\n          currencies\n          currency_map\n          address\n          network\n          owners\n          threshold\n          pending\n        }\n        ... on DigitalAccount {\n          currencies\n          currency_map\n          account_id\n        }\n        ... on StripeAccount {\n          currencies\n          currency_map\n          account_id\n          publishable_key\n        }\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n        ... on EthereumRelayAccount {\n          currencies\n          currency_map\n          address\n          network\n          payment_splitter_contract\n        }\n        ... on EthereumStakeAccount {\n          currencies\n          currency_map\n          address\n          network\n          config_id\n          requirement_checkin_before\n        }\n      }\n      active\n      created_at\n      escrow {\n        minimum_amount\n        minimum_percent\n      }\n      fee\n      provider\n      relay {\n        payment_splitter_contract\n      }\n      title\n      type\n      user\n    }\n    subtotal\n    total\n  }\n}\n\nquery getMyTickets($event: MongoID!, $withPaymentInfo: Boolean) {\n  getMyTickets(event: $event, with_payment_info: $withPaymentInfo) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      assigned_to_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      event\n      invited_by\n      type\n      type_expanded {\n        _id\n        title\n        prices {\n          cost\n          currency\n          default\n          payment_accounts\n          payment_accounts_expanded {\n            ...PaymentAccount\n          }\n        }\n      }\n      shortid\n      event_expanded {\n        _id\n        title\n      }\n    }\n    payments {\n      _id\n      state\n      amount\n      attempting_refund\n      currency\n      refund_info {\n        available_amount\n        refunded\n      }\n      refund_policy {\n        percent\n        requirements {\n          checkin_before\n        }\n        satisfy_all\n      }\n      refund_requirements_met\n      payment_account {\n        _id\n        account_info {\n          ... on EthereumStakeAccount {\n            currencies\n            currency_map\n            address\n            network\n            config_id\n            requirement_checkin_before\n          }\n        }\n        type\n      }\n    }\n  }\n}\n\nmutation redeemTickets($event: MongoID!, $items: [PurchasableItem!]!, $buyer_info: BuyerInfoInput, $inviter: MongoID, $user_info: UserInput, $connect_wallets: [ConnectWalletInput!]) {\n  redeemTickets(\n    input: {event: $event, items: $items, buyer_info: $buyer_info, inviter: $inviter, user_info: $user_info, connect_wallets: $connect_wallets}\n  ) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}\n\nmutation AssignTickets($input: AssignTicketsInput!) {\n  assignTickets(input: $input)\n}\n\nmutation buyTickets($input: BuyTicketsInput!) {\n  buyTickets(input: $input) {\n    payment {\n      _id\n      failure_reason\n      state\n      stamps\n      transfer_metadata\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}": types.CalculateTicketsPricingDocument,
    "query GetMe {\n  getMe {\n    ...User\n    email\n    wallets_new\n    wallet_custodial\n    email_verified\n  }\n}\n\nmutation SetUserWallet($token: String!, $signature: String!) {\n  setUserWallet(token: $token, signature: $signature)\n}\n\nmutation UpdateUser($input: UserInput!) {\n  updateUser(input: $input) {\n    ...User\n  }\n}": types.GetMeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetEvent($id: MongoID, $shortid: String) {\n  getEvent(_id: $id, shortid: $shortid) {\n    _id\n    title\n    description\n    approval_required\n    start\n    end\n    shortid\n    host\n    cohosts\n    host_expanded {\n      ...User\n    }\n    visible_cohosts_expanded {\n      ...User\n    }\n    accepted\n    new_new_photos_expanded {\n      _id\n      stamp\n      type\n      url\n      size\n      bucket\n      key\n    }\n    address {\n      street_1\n      city\n      title\n      region\n      country\n      additional_directions\n      latitude\n      longitude\n    }\n    address_directions\n    subevent_enabled\n    sessions {\n      _id\n      start\n      end\n      broadcast\n      description\n      title\n      broadcast\n      photos_expanded {\n        _id\n        key\n        bucket\n      }\n      speaker_users\n      speaker_users_expanded {\n        ...User\n      }\n    }\n    space\n    timezone\n    application_questions {\n      _id\n      question\n      required\n      position\n      type\n      options\n      select_type\n    }\n    application_profile_fields {\n      field\n      required\n    }\n    rsvp_wallet_platforms {\n      platform\n      required\n    }\n    calendar_links {\n      google\n      ical\n      outlook\n      yahoo\n    }\n    offers {\n      _id\n      provider\n      provider_id\n      provider_network\n    }\n    event_ticket_types {\n      _id\n      offers {\n        _id\n        provider_network\n        provider_id\n        provider\n      }\n    }\n    guest_limit\n    terms_text\n    virtual\n    virtual_url\n    theme_data\n    url\n    url_go\n    external_url\n    external_hostname\n  }\n}\n\nquery GetEvents($subeventParent: MongoID, $skip: Int = 0, $limit: Int = 100, $id: [MongoID!], $site: MongoID, $search: String, $accepted: MongoID, $highlight: Boolean, $unpublished: Boolean, $startFrom: DateTimeISO, $startTo: DateTimeISO, $endFrom: DateTimeISO, $hostFilter: HostFilter, $sort: EventSortInput) {\n  getEvents(\n    subevent_parent: $subeventParent\n    skip: $skip\n    limit: $limit\n    _id: $id\n    site: $site\n    search: $search\n    accepted: $accepted\n    highlight: $highlight\n    unpublished: $unpublished\n    start_from: $startFrom\n    start_to: $startTo\n    end_from: $endFrom\n    host_filter: $hostFilter\n    sort: $sort\n  ) {\n    _id\n    shortid\n    title\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    cohosts_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      url\n      type\n    }\n    start\n    end\n    timezone\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    broadcasts {\n      provider_id\n    }\n    address {\n      title\n      city\n      title\n      region\n      additional_directions\n    }\n    accepted\n    sessions {\n      _id\n      broadcast\n      description\n      end\n      speaker_users\n      speaker_users_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      start\n      title\n    }\n    subevent_parent_expanded {\n      _id\n      shortid\n      title\n      slug\n      start\n      timezone\n      new_new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n        type\n        url\n      }\n      subevent_settings {\n        ticket_required_for_creation\n        ticket_required_for_purchase\n      }\n    }\n  }\n}\n\nquery GetUpcomingEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $host: Boolean, $sort: JSON, $site: MongoID, $unpublished: Boolean) {\n  events: getUpcomingEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    host: $host\n    sort: $sort\n    site: $site\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery GetPastEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $sort: JSON, $site: MongoID, $host: Boolean, $unpublished: Boolean) {\n  events: getPastEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    sort: $sort\n    site: $site\n    host: $host\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery getEventInvitation($event: MongoID!) {\n  getEventInvitation(event: $event) {\n    _id\n    inviters\n  }\n}\n\nquery GetEventTicketTypes($input: GetEventTicketTypesInput!) {\n  getEventTicketTypes(input: $input) {\n    ticket_types {\n      _id\n      title\n      default\n      description\n      event\n      limited\n      limit\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n      whitelisted\n      photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n      category\n      category_expanded {\n        _id\n        description\n        title\n        position\n      }\n      position\n    }\n  }\n}\n\nquery getMyEventJoinRequest($event: MongoID!) {\n  getMyEventJoinRequest(event: $event) {\n    _id\n    created_at\n    decided_at\n    decided_by\n    decided_by_expanded {\n      _id\n      display_name\n      image_avatar\n      username\n      wallets\n    }\n    state\n    payment {\n      _id\n      state\n    }\n    requested_tickets {\n      count\n      ticket_type\n    }\n    ticket_types_expanded {\n      _id\n      title\n    }\n  }\n}\n\nmutation acceptEvent($id: MongoID!, $email: String) {\n  acceptEvent(_id: $id, email: $email) {\n    state\n  }\n}\n\nmutation SubmitEventApplicationAnswers($answers: [EventApplicationAnswerInput!]!, $event: MongoID!, $email: String) {\n  submitEventApplicationAnswers(answers: $answers, event: $event, email: $email)\n}\n\nquery PeekEventGuests($id: MongoID!, $limit: Int) {\n  peekEventGuests(_id: $id, limit: $limit) {\n    items {\n      _id\n      image_avatar\n      name\n      display_name\n      first_name\n    }\n    total\n  }\n}\n\nmutation UpdateEventTheme($id: MongoID!, $input: EventInput!) {\n  updateEvent(_id: $id, input: $input) {\n    _id\n    theme_data\n  }\n}\n\nquery GetEventCohostInvites($input: GetEventCohostRequestsInput!) {\n  getEventCohostInvites(input: $input) {\n    event\n    from_expanded {\n      _id\n      name\n    }\n  }\n}\n\nmutation DecideEventCohostRequest($input: DecideEventCohostRequestInput!) {\n  decideEventCohostRequest(input: $input)\n}\n\nmutation createEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n    shortid\n  }\n}"): (typeof documents)["query GetEvent($id: MongoID, $shortid: String) {\n  getEvent(_id: $id, shortid: $shortid) {\n    _id\n    title\n    description\n    approval_required\n    start\n    end\n    shortid\n    host\n    cohosts\n    host_expanded {\n      ...User\n    }\n    visible_cohosts_expanded {\n      ...User\n    }\n    accepted\n    new_new_photos_expanded {\n      _id\n      stamp\n      type\n      url\n      size\n      bucket\n      key\n    }\n    address {\n      street_1\n      city\n      title\n      region\n      country\n      additional_directions\n      latitude\n      longitude\n    }\n    address_directions\n    subevent_enabled\n    sessions {\n      _id\n      start\n      end\n      broadcast\n      description\n      title\n      broadcast\n      photos_expanded {\n        _id\n        key\n        bucket\n      }\n      speaker_users\n      speaker_users_expanded {\n        ...User\n      }\n    }\n    space\n    timezone\n    application_questions {\n      _id\n      question\n      required\n      position\n      type\n      options\n      select_type\n    }\n    application_profile_fields {\n      field\n      required\n    }\n    rsvp_wallet_platforms {\n      platform\n      required\n    }\n    calendar_links {\n      google\n      ical\n      outlook\n      yahoo\n    }\n    offers {\n      _id\n      provider\n      provider_id\n      provider_network\n    }\n    event_ticket_types {\n      _id\n      offers {\n        _id\n        provider_network\n        provider_id\n        provider\n      }\n    }\n    guest_limit\n    terms_text\n    virtual\n    virtual_url\n    theme_data\n    url\n    url_go\n    external_url\n    external_hostname\n  }\n}\n\nquery GetEvents($subeventParent: MongoID, $skip: Int = 0, $limit: Int = 100, $id: [MongoID!], $site: MongoID, $search: String, $accepted: MongoID, $highlight: Boolean, $unpublished: Boolean, $startFrom: DateTimeISO, $startTo: DateTimeISO, $endFrom: DateTimeISO, $hostFilter: HostFilter, $sort: EventSortInput) {\n  getEvents(\n    subevent_parent: $subeventParent\n    skip: $skip\n    limit: $limit\n    _id: $id\n    site: $site\n    search: $search\n    accepted: $accepted\n    highlight: $highlight\n    unpublished: $unpublished\n    start_from: $startFrom\n    start_to: $startTo\n    end_from: $endFrom\n    host_filter: $hostFilter\n    sort: $sort\n  ) {\n    _id\n    shortid\n    title\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    cohosts_expanded {\n      _id\n      name\n      new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n    }\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      url\n      type\n    }\n    start\n    end\n    timezone\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    broadcasts {\n      provider_id\n    }\n    address {\n      title\n      city\n      title\n      region\n      additional_directions\n    }\n    accepted\n    sessions {\n      _id\n      broadcast\n      description\n      end\n      speaker_users\n      speaker_users_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      start\n      title\n    }\n    subevent_parent_expanded {\n      _id\n      shortid\n      title\n      slug\n      start\n      timezone\n      new_new_photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n        type\n        url\n      }\n      subevent_settings {\n        ticket_required_for_creation\n        ticket_required_for_purchase\n      }\n    }\n  }\n}\n\nquery GetUpcomingEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $host: Boolean, $sort: JSON, $site: MongoID, $unpublished: Boolean) {\n  events: getUpcomingEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    host: $host\n    sort: $sort\n    site: $site\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery GetPastEvents($user: MongoID!, $limit: Int = 100, $skip: Int = 0, $sort: JSON, $site: MongoID, $host: Boolean, $unpublished: Boolean) {\n  events: getPastEvents(\n    user: $user\n    limit: $limit\n    skip: $skip\n    sort: $sort\n    site: $site\n    host: $host\n    unpublished: $unpublished\n  ) {\n    _id\n    shortid\n    title\n    slug\n    host\n    host_expanded {\n      _id\n      name\n      new_photos_expanded {\n        _id\n        key\n        bucket\n      }\n    }\n    cohosts\n    new_new_photos_expanded(limit: 1) {\n      _id\n      key\n      bucket\n      type\n      url\n    }\n    start\n    end\n    timezone\n    address {\n      street_1\n      city\n      title\n      region\n    }\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    me_awaiting_approval\n    published\n  }\n}\n\nquery getEventInvitation($event: MongoID!) {\n  getEventInvitation(event: $event) {\n    _id\n    inviters\n  }\n}\n\nquery GetEventTicketTypes($input: GetEventTicketTypesInput!) {\n  getEventTicketTypes(input: $input) {\n    ticket_types {\n      _id\n      title\n      default\n      description\n      event\n      limited\n      limit\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n      whitelisted\n      photos_expanded(limit: 1) {\n        _id\n        key\n        bucket\n      }\n      category\n      category_expanded {\n        _id\n        description\n        title\n        position\n      }\n      position\n    }\n  }\n}\n\nquery getMyEventJoinRequest($event: MongoID!) {\n  getMyEventJoinRequest(event: $event) {\n    _id\n    created_at\n    decided_at\n    decided_by\n    decided_by_expanded {\n      _id\n      display_name\n      image_avatar\n      username\n      wallets\n    }\n    state\n    payment {\n      _id\n      state\n    }\n    requested_tickets {\n      count\n      ticket_type\n    }\n    ticket_types_expanded {\n      _id\n      title\n    }\n  }\n}\n\nmutation acceptEvent($id: MongoID!, $email: String) {\n  acceptEvent(_id: $id, email: $email) {\n    state\n  }\n}\n\nmutation SubmitEventApplicationAnswers($answers: [EventApplicationAnswerInput!]!, $event: MongoID!, $email: String) {\n  submitEventApplicationAnswers(answers: $answers, event: $event, email: $email)\n}\n\nquery PeekEventGuests($id: MongoID!, $limit: Int) {\n  peekEventGuests(_id: $id, limit: $limit) {\n    items {\n      _id\n      image_avatar\n      name\n      display_name\n      first_name\n    }\n    total\n  }\n}\n\nmutation UpdateEventTheme($id: MongoID!, $input: EventInput!) {\n  updateEvent(_id: $id, input: $input) {\n    _id\n    theme_data\n  }\n}\n\nquery GetEventCohostInvites($input: GetEventCohostRequestsInput!) {\n  getEventCohostInvites(input: $input) {\n    event\n    from_expanded {\n      _id\n      name\n    }\n  }\n}\n\nmutation DecideEventCohostRequest($input: DecideEventCohostRequestInput!) {\n  decideEventCohostRequest(input: $input)\n}\n\nmutation createEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n    shortid\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSystemFiles($categories: [FileCategory!]) {\n  getSystemFiles(categories: $categories) {\n    _id\n    name\n    category\n    url\n    type\n    bucket\n    key\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}\n\nmutation confirmFileUploads($ids: [MongoID!]!) {\n  confirmFileUploads(ids: $ids)\n}\n\nmutation updateFileDescriptionMutation($input: FileInput!, $id: MongoID!) {\n  updateFile(input: $input, _id: $id) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    description\n  }\n}"): (typeof documents)["query GetSystemFiles($categories: [FileCategory!]) {\n  getSystemFiles(categories: $categories) {\n    _id\n    name\n    category\n    url\n    type\n    bucket\n    key\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}\n\nmutation confirmFileUploads($ids: [MongoID!]!) {\n  confirmFileUploads(ids: $ids)\n}\n\nmutation updateFileDescriptionMutation($input: FileInput!, $id: MongoID!) {\n  updateFile(input: $input, _id: $id) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    description\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment User on User {\n  _id\n  name\n  display_name\n  first_name\n  last_name\n  username\n  description\n  job_title\n  company_name\n  addresses {\n    _id\n    street_1\n    street_2\n    city\n    region\n    postal\n    country\n    title\n    phone\n    longitude\n    latitude\n    additional_directions\n  }\n  icebreakers {\n    _id\n    value\n    question_expanded {\n      _id\n      title\n    }\n  }\n  handle_facebook\n  handle_instagram\n  handle_linkedin\n  handle_twitter\n  handle_farcaster\n  handle_github\n  pronoun\n  calendly_url\n  website\n  new_photos_expanded(limit: 1) {\n    _id\n    key\n    bucket\n  }\n  url\n  url_go\n  lens_profile_synced\n}\n\nfragment PaymentAccount on NewPaymentAccount {\n  _id\n  provider\n  type\n  title\n  account_info {\n    ... on EthereumAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n    ... on SafeAccount {\n      currencies\n      currency_map\n      address\n      network\n      owners\n      threshold\n      pending\n    }\n    ... on DigitalAccount {\n      currencies\n      currency_map\n      account_id\n    }\n    ... on StripeAccount {\n      currencies\n      currency_map\n      account_id\n      publishable_key\n    }\n    ... on EthereumEscrowAccount {\n      currencies\n      currency_map\n      address\n      network\n      minimum_deposit_percent\n      host_refund_percent\n      refund_policies {\n        percent\n        timestamp\n      }\n    }\n    ... on EthereumRelayAccount {\n      currencies\n      currency_map\n      address\n      network\n      payment_splitter_contract\n    }\n    ... on EthereumStakeAccount {\n      currencies\n      currency_map\n      address\n      network\n      config_id\n      requirement_checkin_before\n    }\n    ... on SolanaAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n  }\n}"): (typeof documents)["fragment User on User {\n  _id\n  name\n  display_name\n  first_name\n  last_name\n  username\n  description\n  job_title\n  company_name\n  addresses {\n    _id\n    street_1\n    street_2\n    city\n    region\n    postal\n    country\n    title\n    phone\n    longitude\n    latitude\n    additional_directions\n  }\n  icebreakers {\n    _id\n    value\n    question_expanded {\n      _id\n      title\n    }\n  }\n  handle_facebook\n  handle_instagram\n  handle_linkedin\n  handle_twitter\n  handle_farcaster\n  handle_github\n  pronoun\n  calendly_url\n  website\n  new_photos_expanded(limit: 1) {\n    _id\n    key\n    bucket\n  }\n  url\n  url_go\n  lens_profile_synced\n}\n\nfragment PaymentAccount on NewPaymentAccount {\n  _id\n  provider\n  type\n  title\n  account_info {\n    ... on EthereumAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n    ... on SafeAccount {\n      currencies\n      currency_map\n      address\n      network\n      owners\n      threshold\n      pending\n    }\n    ... on DigitalAccount {\n      currencies\n      currency_map\n      account_id\n    }\n    ... on StripeAccount {\n      currencies\n      currency_map\n      account_id\n      publishable_key\n    }\n    ... on EthereumEscrowAccount {\n      currencies\n      currency_map\n      address\n      network\n      minimum_deposit_percent\n      host_refund_percent\n      refund_policies {\n        percent\n        timestamp\n      }\n    }\n    ... on EthereumRelayAccount {\n      currencies\n      currency_map\n      address\n      network\n      payment_splitter_contract\n    }\n    ... on EthereumStakeAccount {\n      currencies\n      currency_map\n      address\n      network\n      config_id\n      requirement_checkin_before\n    }\n    ... on SolanaAccount {\n      currencies\n      currency_map\n      address\n      network\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query listChains {\n  listChains {\n    active\n    platform\n    chain_id\n    name\n    code_name\n    rpc_url\n    block_explorer_url\n    block_explorer_name\n    block_explorer_for_tx\n    block_explorer_for_token\n    block_explorer_for_address\n    block_time\n    safe_confirmations\n    logo_url\n    tokens {\n      active\n      name\n      symbol\n      decimals\n      contract\n      logo_url\n      is_native\n    }\n    access_registry_contract\n    poap_contract\n    marketplace_contract\n    marketplace_version\n    biconomy_api_key\n    ens_registry\n    proxy_admin_contract\n    payment_config_registry_contract\n    escrow_manager_contract\n    relay_payment_contract\n    stake_payment_contract\n    reward_registry_contract\n    eas_event_contract\n    eas_graphql_url\n    aragon_network\n    axelar_chain_name\n    donation_registry_contract\n    lemonhead_contract_address\n  }\n}\n\nquery GetUserWalletRequest($wallet: String!) {\n  getUserWalletRequest(wallet: $wallet) {\n    message\n    token\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}"): (typeof documents)["query listChains {\n  listChains {\n    active\n    platform\n    chain_id\n    name\n    code_name\n    rpc_url\n    block_explorer_url\n    block_explorer_name\n    block_explorer_for_tx\n    block_explorer_for_token\n    block_explorer_for_address\n    block_time\n    safe_confirmations\n    logo_url\n    tokens {\n      active\n      name\n      symbol\n      decimals\n      contract\n      logo_url\n      is_native\n    }\n    access_registry_contract\n    poap_contract\n    marketplace_contract\n    marketplace_version\n    biconomy_api_key\n    ens_registry\n    proxy_admin_contract\n    payment_config_registry_contract\n    escrow_manager_contract\n    relay_payment_contract\n    stake_payment_contract\n    reward_registry_contract\n    eas_event_contract\n    eas_graphql_url\n    aragon_network\n    axelar_chain_name\n    donation_registry_contract\n    lemonhead_contract_address\n  }\n}\n\nquery GetUserWalletRequest($wallet: String!) {\n  getUserWalletRequest(wallet: $wallet) {\n    message\n    token\n  }\n}\n\nmutation createFileUploads($uploadInfos: [FileUploadInfo!]!, $directory: String!) {\n  createFileUploads(upload_infos: $uploadInfos, directory: $directory) {\n    _id\n    stamp\n    state\n    owner\n    type\n    size\n    url\n    bucket\n    key\n    presignedUrl: presigned_url\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createStripeCard($paymentMethod: String!) {\n  createStripeCard(payment_method: $paymentMethod) {\n    _id\n    provider_id\n  }\n}\n\nquery getStripeCards {\n  getStripeCards {\n    _id\n    active\n    brand\n    last4\n    name\n    provider_id\n    stamp\n    user\n  }\n}\n\nmutation updatePayment($input: UpdatePaymentInput!) {\n  updatePayment(input: $input) {\n    _id\n    transfer_metadata\n    state\n    failure_reason\n  }\n}\n\nquery getNewPayment($id: MongoID!, $paymentSecret: String) {\n  getNewPayment(_id: $id, payment_secret: $paymentSecret) {\n    _id\n    due_amount\n    amount\n    currency\n    ref_data\n    state\n    failure_reason\n    account_expanded {\n      _id\n      type\n      account_info {\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getPaymentRefundSignature($id: MongoID!) {\n  getPaymentRefundSignature(_id: $id) {\n    args\n    signature\n  }\n}"): (typeof documents)["mutation createStripeCard($paymentMethod: String!) {\n  createStripeCard(payment_method: $paymentMethod) {\n    _id\n    provider_id\n  }\n}\n\nquery getStripeCards {\n  getStripeCards {\n    _id\n    active\n    brand\n    last4\n    name\n    provider_id\n    stamp\n    user\n  }\n}\n\nmutation updatePayment($input: UpdatePaymentInput!) {\n  updatePayment(input: $input) {\n    _id\n    transfer_metadata\n    state\n    failure_reason\n  }\n}\n\nquery getNewPayment($id: MongoID!, $paymentSecret: String) {\n  getNewPayment(_id: $id, payment_secret: $paymentSecret) {\n    _id\n    due_amount\n    amount\n    currency\n    ref_data\n    state\n    failure_reason\n    account_expanded {\n      _id\n      type\n      account_info {\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getPaymentRefundSignature($id: MongoID!) {\n  getPaymentRefundSignature(_id: $id) {\n    args\n    signature\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Space on Space {\n  _id\n  title\n  admins {\n    _id\n    image_avatar\n  }\n  description\n  is_ambassador\n  followed\n  followers\n  image_avatar\n  image_avatar_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  image_cover\n  image_cover_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  creator\n  creator_expanded {\n    _id\n    name\n    image_avatar\n  }\n  slug\n  private\n  listed_events\n  website\n  address {\n    _id\n    city\n    country\n    latitude\n    longitude\n    street_1\n    street_2\n    region\n    title\n  }\n  handle_instagram\n  handle_twitter\n  handle_linkedin\n  handle_youtube\n  handle_tiktok\n  personal\n  theme_data\n  sub_spaces\n  lens_feed_id\n}\n\nfragment SpaceTagFragment on SpaceTag {\n  _id\n  color\n  space\n  tag\n  targets\n  type\n}\n\nfragment SpaceEventRequestFragment on SpaceEventRequest {\n  _id\n  created_at\n  space\n  event\n  state\n  decided_at\n  decided_by\n}\n\nquery GetSpaces($with_my_spaces: Boolean, $with_public_spaces: Boolean, $roles: [SpaceRole!], $featured: Boolean) {\n  listSpaces(\n    with_my_spaces: $with_my_spaces\n    with_public_spaces: $with_public_spaces\n    roles: $roles\n    featured: $featured\n  ) {\n    ...Space\n  }\n}\n\nquery GetSpace($id: MongoID, $slug: String, $hostname: String) {\n  getSpace(_id: $id, slug: $slug, hostname: $hostname) {\n    ...Space\n  }\n}\n\nquery GetSpaceEvents($skip: Int, $limit: Int, $startFrom: DateTimeISO, $startTo: DateTimeISO, $space: MongoID, $sort: EventSortInput, $endFrom: DateTimeISO, $endTo: DateTimeISO, $spaceTags: [MongoID!]) {\n  getEvents(\n    skip: $skip\n    limit: $limit\n    start_from: $startFrom\n    start_to: $startTo\n    space: $space\n    sort: $sort\n    end_from: $endFrom\n    end_to: $endTo\n    space_tags: $spaceTags\n  ) {\n    _id\n    shortid\n    title\n    host_expanded {\n      _id\n      image_avatar\n      name\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n      name\n    }\n    address {\n      city\n      country\n      region\n      latitude\n      longitude\n    }\n    new_new_photos_expanded {\n      _id\n      bucket\n      key\n      type\n      url\n    }\n    start\n    end\n    timezone\n    external_url\n    external_hostname\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    host_expanded {\n      _id\n      image_avatar\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n    }\n  }\n}\n\nquery GetSpaceEventsCalendar($space: MongoID) {\n  getEvents(space: $space) {\n    _id\n    start\n    address {\n      _id\n      latitude\n      longitude\n    }\n  }\n}\n\nquery GetSpaceTags($space: MongoID!) {\n  listSpaceTags(space: $space) {\n    ...SpaceTagFragment\n  }\n}\n\nquery GetSpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getSpaceEventRequests(space: $space, skip: $skip, limit: $limit, state: $state) {\n    records {\n      _id\n      created_at\n      space\n      event\n      state\n      decided_at\n      decided_by\n      event_expanded {\n        title\n        start\n        address {\n          city\n          country\n          region\n        }\n        new_new_photos_expanded {\n          _id\n          bucket\n          key\n          type\n          url\n        }\n      }\n    }\n    total\n  }\n}\n\nquery GetMySpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getMySpaceEventRequests(\n    space: $space\n    skip: $skip\n    limit: $limit\n    state: $state\n  ) {\n    records {\n      _id\n      state\n      event_expanded {\n        _id\n        title\n        new_new_photos_expanded {\n          key\n          bucket\n          _id\n          url\n          type\n        }\n      }\n    }\n  }\n}\n\nquery getSubSpaces($id: MongoID!) {\n  getSubSpaces(_id: $id) {\n    _id\n    title\n    description\n    followers_count\n    slug\n    is_admin\n    followed\n    image_avatar_expanded {\n      _id\n      bucket\n      url\n      type\n      key\n    }\n  }\n}\n\nquery GetListSpaceCategories {\n  listSpaceCategories {\n    description\n    image_url\n    listed_events_count\n    space\n    title\n  }\n}\n\nquery GetListGeoRegions {\n  listGeoRegions {\n    _id\n    title\n    cities {\n      name\n      region\n      space\n      icon_url\n      listed_events_count\n    }\n  }\n}\n\nmutation FollowSpace($space: MongoID!) {\n  followSpace(space: $space)\n}\n\nmutation UnfollowSpace($space: MongoID!) {\n  unfollowSpace(space: $space)\n}\n\nmutation UpdateSpace($id: MongoID!, $input: SpaceInput!) {\n  updateSpace(_id: $id, input: $input) {\n    ...Space\n  }\n}\n\nmutation PinEventsToSpace($space: MongoID!, $events: [MongoID!]!, $tags: [MongoID!]) {\n  pinEventsToSpace(space: $space, events: $events, tags: $tags) {\n    requests {\n      ...SpaceEventRequestFragment\n    }\n  }\n}\n\nmutation CreateExternalEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n  }\n}"): (typeof documents)["fragment Space on Space {\n  _id\n  title\n  admins {\n    _id\n    image_avatar\n  }\n  description\n  is_ambassador\n  followed\n  followers\n  image_avatar\n  image_avatar_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  image_cover\n  image_cover_expanded {\n    _id\n    bucket\n    url\n    type\n    key\n  }\n  creator\n  creator_expanded {\n    _id\n    name\n    image_avatar\n  }\n  slug\n  private\n  listed_events\n  website\n  address {\n    _id\n    city\n    country\n    latitude\n    longitude\n    street_1\n    street_2\n    region\n    title\n  }\n  handle_instagram\n  handle_twitter\n  handle_linkedin\n  handle_youtube\n  handle_tiktok\n  personal\n  theme_data\n  sub_spaces\n  lens_feed_id\n}\n\nfragment SpaceTagFragment on SpaceTag {\n  _id\n  color\n  space\n  tag\n  targets\n  type\n}\n\nfragment SpaceEventRequestFragment on SpaceEventRequest {\n  _id\n  created_at\n  space\n  event\n  state\n  decided_at\n  decided_by\n}\n\nquery GetSpaces($with_my_spaces: Boolean, $with_public_spaces: Boolean, $roles: [SpaceRole!], $featured: Boolean) {\n  listSpaces(\n    with_my_spaces: $with_my_spaces\n    with_public_spaces: $with_public_spaces\n    roles: $roles\n    featured: $featured\n  ) {\n    ...Space\n  }\n}\n\nquery GetSpace($id: MongoID, $slug: String, $hostname: String) {\n  getSpace(_id: $id, slug: $slug, hostname: $hostname) {\n    ...Space\n  }\n}\n\nquery GetSpaceEvents($skip: Int, $limit: Int, $startFrom: DateTimeISO, $startTo: DateTimeISO, $space: MongoID, $sort: EventSortInput, $endFrom: DateTimeISO, $endTo: DateTimeISO, $spaceTags: [MongoID!]) {\n  getEvents(\n    skip: $skip\n    limit: $limit\n    start_from: $startFrom\n    start_to: $startTo\n    space: $space\n    sort: $sort\n    end_from: $endFrom\n    end_to: $endTo\n    space_tags: $spaceTags\n  ) {\n    _id\n    shortid\n    title\n    host_expanded {\n      _id\n      image_avatar\n      name\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n      name\n    }\n    address {\n      city\n      country\n      region\n      latitude\n      longitude\n    }\n    new_new_photos_expanded {\n      _id\n      bucket\n      key\n      type\n      url\n    }\n    start\n    end\n    timezone\n    external_url\n    external_hostname\n    event_ticket_types {\n      _id\n      prices {\n        cost\n        currency\n        default\n        payment_accounts\n        payment_accounts_expanded {\n          ...PaymentAccount\n        }\n      }\n    }\n    host_expanded {\n      _id\n      image_avatar\n    }\n    visible_cohosts_expanded {\n      _id\n      image_avatar\n    }\n  }\n}\n\nquery GetSpaceEventsCalendar($space: MongoID) {\n  getEvents(space: $space) {\n    _id\n    start\n    address {\n      _id\n      latitude\n      longitude\n    }\n  }\n}\n\nquery GetSpaceTags($space: MongoID!) {\n  listSpaceTags(space: $space) {\n    ...SpaceTagFragment\n  }\n}\n\nquery GetSpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getSpaceEventRequests(space: $space, skip: $skip, limit: $limit, state: $state) {\n    records {\n      _id\n      created_at\n      space\n      event\n      state\n      decided_at\n      decided_by\n      event_expanded {\n        title\n        start\n        address {\n          city\n          country\n          region\n        }\n        new_new_photos_expanded {\n          _id\n          bucket\n          key\n          type\n          url\n        }\n      }\n    }\n    total\n  }\n}\n\nquery GetMySpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {\n  getMySpaceEventRequests(\n    space: $space\n    skip: $skip\n    limit: $limit\n    state: $state\n  ) {\n    records {\n      _id\n      state\n      event_expanded {\n        _id\n        title\n        new_new_photos_expanded {\n          key\n          bucket\n          _id\n          url\n          type\n        }\n      }\n    }\n  }\n}\n\nquery getSubSpaces($id: MongoID!) {\n  getSubSpaces(_id: $id) {\n    _id\n    title\n    description\n    followers_count\n    slug\n    is_admin\n    followed\n    image_avatar_expanded {\n      _id\n      bucket\n      url\n      type\n      key\n    }\n  }\n}\n\nquery GetListSpaceCategories {\n  listSpaceCategories {\n    description\n    image_url\n    listed_events_count\n    space\n    title\n  }\n}\n\nquery GetListGeoRegions {\n  listGeoRegions {\n    _id\n    title\n    cities {\n      name\n      region\n      space\n      icon_url\n      listed_events_count\n    }\n  }\n}\n\nmutation FollowSpace($space: MongoID!) {\n  followSpace(space: $space)\n}\n\nmutation UnfollowSpace($space: MongoID!) {\n  unfollowSpace(space: $space)\n}\n\nmutation UpdateSpace($id: MongoID!, $input: SpaceInput!) {\n  updateSpace(_id: $id, input: $input) {\n    ...Space\n  }\n}\n\nmutation PinEventsToSpace($space: MongoID!, $events: [MongoID!]!, $tags: [MongoID!]) {\n  pinEventsToSpace(space: $space, events: $events, tags: $tags) {\n    requests {\n      ...SpaceEventRequestFragment\n    }\n  }\n}\n\nmutation CreateExternalEvent($input: EventInput!) {\n  createEvent(input: $input) {\n    _id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CalculateTicketsPricing($input: CalculateTicketsPricingInput!) {\n  calculateTicketsPricing(input: $input) {\n    deposit_infos {\n      minimum_amount\n      minimum_percent\n    }\n    discount\n    payment_accounts {\n      _id\n      account_info {\n        ... on SolanaAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on EthereumAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on SafeAccount {\n          currencies\n          currency_map\n          address\n          network\n          owners\n          threshold\n          pending\n        }\n        ... on DigitalAccount {\n          currencies\n          currency_map\n          account_id\n        }\n        ... on StripeAccount {\n          currencies\n          currency_map\n          account_id\n          publishable_key\n        }\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n        ... on EthereumRelayAccount {\n          currencies\n          currency_map\n          address\n          network\n          payment_splitter_contract\n        }\n        ... on EthereumStakeAccount {\n          currencies\n          currency_map\n          address\n          network\n          config_id\n          requirement_checkin_before\n        }\n      }\n      active\n      created_at\n      escrow {\n        minimum_amount\n        minimum_percent\n      }\n      fee\n      provider\n      relay {\n        payment_splitter_contract\n      }\n      title\n      type\n      user\n    }\n    subtotal\n    total\n  }\n}\n\nquery getMyTickets($event: MongoID!, $withPaymentInfo: Boolean) {\n  getMyTickets(event: $event, with_payment_info: $withPaymentInfo) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      assigned_to_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      event\n      invited_by\n      type\n      type_expanded {\n        _id\n        title\n        prices {\n          cost\n          currency\n          default\n          payment_accounts\n          payment_accounts_expanded {\n            ...PaymentAccount\n          }\n        }\n      }\n      shortid\n      event_expanded {\n        _id\n        title\n      }\n    }\n    payments {\n      _id\n      state\n      amount\n      attempting_refund\n      currency\n      refund_info {\n        available_amount\n        refunded\n      }\n      refund_policy {\n        percent\n        requirements {\n          checkin_before\n        }\n        satisfy_all\n      }\n      refund_requirements_met\n      payment_account {\n        _id\n        account_info {\n          ... on EthereumStakeAccount {\n            currencies\n            currency_map\n            address\n            network\n            config_id\n            requirement_checkin_before\n          }\n        }\n        type\n      }\n    }\n  }\n}\n\nmutation redeemTickets($event: MongoID!, $items: [PurchasableItem!]!, $buyer_info: BuyerInfoInput, $inviter: MongoID, $user_info: UserInput, $connect_wallets: [ConnectWalletInput!]) {\n  redeemTickets(\n    input: {event: $event, items: $items, buyer_info: $buyer_info, inviter: $inviter, user_info: $user_info, connect_wallets: $connect_wallets}\n  ) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}\n\nmutation AssignTickets($input: AssignTicketsInput!) {\n  assignTickets(input: $input)\n}\n\nmutation buyTickets($input: BuyTicketsInput!) {\n  buyTickets(input: $input) {\n    payment {\n      _id\n      failure_reason\n      state\n      stamps\n      transfer_metadata\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}"): (typeof documents)["query CalculateTicketsPricing($input: CalculateTicketsPricingInput!) {\n  calculateTicketsPricing(input: $input) {\n    deposit_infos {\n      minimum_amount\n      minimum_percent\n    }\n    discount\n    payment_accounts {\n      _id\n      account_info {\n        ... on SolanaAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on EthereumAccount {\n          currencies\n          currency_map\n          address\n          network\n        }\n        ... on SafeAccount {\n          currencies\n          currency_map\n          address\n          network\n          owners\n          threshold\n          pending\n        }\n        ... on DigitalAccount {\n          currencies\n          currency_map\n          account_id\n        }\n        ... on StripeAccount {\n          currencies\n          currency_map\n          account_id\n          publishable_key\n        }\n        ... on EthereumEscrowAccount {\n          currencies\n          currency_map\n          address\n          network\n          minimum_deposit_percent\n          host_refund_percent\n          refund_policies {\n            percent\n            timestamp\n          }\n        }\n        ... on EthereumRelayAccount {\n          currencies\n          currency_map\n          address\n          network\n          payment_splitter_contract\n        }\n        ... on EthereumStakeAccount {\n          currencies\n          currency_map\n          address\n          network\n          config_id\n          requirement_checkin_before\n        }\n      }\n      active\n      created_at\n      escrow {\n        minimum_amount\n        minimum_percent\n      }\n      fee\n      provider\n      relay {\n        payment_splitter_contract\n      }\n      title\n      type\n      user\n    }\n    subtotal\n    total\n  }\n}\n\nquery getMyTickets($event: MongoID!, $withPaymentInfo: Boolean) {\n  getMyTickets(event: $event, with_payment_info: $withPaymentInfo) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      assigned_to_expanded {\n        _id\n        name\n        new_photos_expanded(limit: 1) {\n          _id\n          key\n          bucket\n        }\n      }\n      event\n      invited_by\n      type\n      type_expanded {\n        _id\n        title\n        prices {\n          cost\n          currency\n          default\n          payment_accounts\n          payment_accounts_expanded {\n            ...PaymentAccount\n          }\n        }\n      }\n      shortid\n      event_expanded {\n        _id\n        title\n      }\n    }\n    payments {\n      _id\n      state\n      amount\n      attempting_refund\n      currency\n      refund_info {\n        available_amount\n        refunded\n      }\n      refund_policy {\n        percent\n        requirements {\n          checkin_before\n        }\n        satisfy_all\n      }\n      refund_requirements_met\n      payment_account {\n        _id\n        account_info {\n          ... on EthereumStakeAccount {\n            currencies\n            currency_map\n            address\n            network\n            config_id\n            requirement_checkin_before\n          }\n        }\n        type\n      }\n    }\n  }\n}\n\nmutation redeemTickets($event: MongoID!, $items: [PurchasableItem!]!, $buyer_info: BuyerInfoInput, $inviter: MongoID, $user_info: UserInput, $connect_wallets: [ConnectWalletInput!]) {\n  redeemTickets(\n    input: {event: $event, items: $items, buyer_info: $buyer_info, inviter: $inviter, user_info: $user_info, connect_wallets: $connect_wallets}\n  ) {\n    tickets {\n      _id\n      accepted\n      assigned_email\n      assigned_to\n      event\n      invited_by\n      type\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}\n\nmutation AssignTickets($input: AssignTicketsInput!) {\n  assignTickets(input: $input)\n}\n\nmutation buyTickets($input: BuyTicketsInput!) {\n  buyTickets(input: $input) {\n    payment {\n      _id\n      failure_reason\n      state\n      stamps\n      transfer_metadata\n    }\n    join_request {\n      _id\n      state\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetMe {\n  getMe {\n    ...User\n    email\n    wallets_new\n    wallet_custodial\n    email_verified\n  }\n}\n\nmutation SetUserWallet($token: String!, $signature: String!) {\n  setUserWallet(token: $token, signature: $signature)\n}\n\nmutation UpdateUser($input: UserInput!) {\n  updateUser(input: $input) {\n    ...User\n  }\n}"): (typeof documents)["query GetMe {\n  getMe {\n    ...User\n    email\n    wallets_new\n    wallet_custodial\n    email_verified\n  }\n}\n\nmutation SetUserWallet($token: String!, $signature: String!) {\n  setUserWallet(token: $token, signature: $signature)\n}\n\nmutation UpdateUser($input: UserInput!) {\n  updateUser(input: $input) {\n    ...User\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;