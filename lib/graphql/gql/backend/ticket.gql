query CalculateTicketsPricing($input: CalculateTicketsPricingInput!) {
  calculateTicketsPricing(input: $input) {
    deposit_infos {
      minimum_amount
      minimum_percent
    }
    discount
    payment_accounts {
      _id
      account_info {
        ... on SolanaAccount {
          currencies
          currency_map
          address
          network
        }
        ... on EthereumAccount {
          currencies
          currency_map
          address
          network
        }
        ... on SafeAccount {
          currencies
          currency_map
          address
          network
          owners
          threshold
          pending
        }
        ... on DigitalAccount {
          currencies
          currency_map
          account_id
        }
        ... on StripeAccount {
          currencies
          currency_map
          account_id
          publishable_key
        }
        ... on EthereumEscrowAccount {
          currencies
          currency_map
          address
          network
          minimum_deposit_percent
          host_refund_percent
          refund_policies {
            percent
            timestamp
          }
        }
        ... on EthereumRelayAccount {
          currencies
          currency_map
          address
          network
          payment_splitter_contract
        }
        ... on EthereumStakeAccount {
          currencies
          currency_map
          address
          network
          config_id
          requirement_checkin_before
        }
      }
      active
      created_at
      escrow {
        minimum_amount
        minimum_percent
      }
      fee
      provider
      relay {
        payment_splitter_contract
      }
      title
      type
      user
    }
    subtotal
    total
  }
}

query getMyTickets($event: MongoID!, $withPaymentInfo: Boolean) {
  getMyTickets(event: $event, with_payment_info: $withPaymentInfo) {
    tickets {
      _id
      accepted
      assigned_email
      assigned_to
      assigned_to_expanded {
        _id,
        name,
        new_photos_expanded(limit: 1) {
          _id
          key
          bucket
        }
      }
      event
      invited_by
      type
      type_expanded {
        _id
        title
        prices {
          cost
          currency
          default
          payment_accounts
          payment_accounts_expanded {
            ...PaymentAccount
          }
        }
      }
      shortid
      event_expanded {
        _id
        title
      }
    }
    payments {
      _id
      state
      amount
      attempting_refund
      currency
      refund_info {
        available_amount
        refunded
      }
      refund_policy {
        percent
        requirements {
          checkin_before
        }
        satisfy_all
      }
      refund_requirements_met
      payment_account {
        _id
        account_info {
          ... on EthereumStakeAccount {
            currencies
            currency_map
            address
            network
            config_id
            requirement_checkin_before
          }
        }
        type
      }
    }
  }
}

mutation redeemTickets($event: MongoID!, $items: [PurchasableItem!]!, $buyer_info: BuyerInfoInput, $inviter: MongoID, $user_info: UserInput, $connect_wallets: [ConnectWalletInput!], $buyer_wallet: String) {
  redeemTickets(input: { event: $event, items: $items, buyer_info: $buyer_info, inviter: $inviter, user_info: $user_info, connect_wallets: $connect_wallets, buyer_wallet: $buyer_wallet }) {
    tickets {
      _id
      accepted
      assigned_email
      assigned_to
      event
      invited_by
      type
    }
    join_request {
      _id
      state
    }
  }
}

mutation AssignTickets($input: AssignTicketsInput!) {
  assignTickets(input: $input)
}

mutation buyTickets($input: BuyTicketsInput!) {
  buyTickets(input: $input) {
    payment {
      _id
      failure_reason
      state
      stamps
      transfer_metadata
    }
    join_request {
      _id
      state
    }
  }
}

mutation createEventTicketType($input: EventTicketTypeInput!) {
  createEventTicketType(input: $input) {
    _id
    active
    private
    default
    description
    photos
    photos_expanded {
      _id
      bucket
      key
    }
    prices {
      cost
      currency
      default
      payment_accounts
      payment_accounts_expanded {
        ...PaymentAccount
      }
    }
    ticket_limit
    title
    limited
    limited_whitelist_users {
      _id
      email
    }
    category
    category_expanded {
      _id
      description
      title
      position
    }
    position
  }
}

mutation deleteEventTicketType($event: MongoID!, $id: MongoID!) {
  deleteEventTicketType(event: $event, _id: $id)
}

mutation updateEventTicketType($input: EventTicketTypeInput!, $id: MongoID!) {
  updateEventTicketType(input: $input, _id: $id) {
    _id
    active
    default
    private
    description
    event
    photos
    photos_expanded {
      _id
      bucket
      key
    }
    prices {
      cost
      currency
      default
      payment_accounts
      payment_accounts_expanded {
        ...PaymentAccount
      }
    }
    ticket_limit
    title
    offers {
      _id
      auto
      broadcast_rooms
      position
      provider
      provider_id
      provider_network
    }
    limited
    limited_whitelist_users {
      _id
      email
    }
    category
    category_expanded {
      _id
      description
      title
      position
    }
    position
  }
}

query exportEventTickets(
  $id: MongoID!
  $ticketTypeIds: [MongoID!]
  $searchText: String
  $pagination: PaginationInput
  $checkedIn: Boolean
) {
  exportEventTickets(
    _id: $id
    ticket_type_ids: $ticketTypeIds
    search_text: $searchText
    pagination: $pagination
    checked_in: $checkedIn
  ) {
    count
    tickets {
      _id
      buyer_name
      buyer_first_name
      buyer_last_name
      buyer_email
      ticket_category
      ticket_type
      quantity
      payment_amount
      discount_amount
      currency
      discount_code
      purchase_date
      payment_provider
      payment_id
      checkin_date
      is_assigned
      assignee_email
      assigned_to
      assigned_email
      is_issued
      issued_by
      is_claimed
      active
      cancelled_by
      buyer_wallet
      buyer_id
      buyer_avatar
      buyer_username
      ticket_type_id
      shortid
    }
  }
}

mutation CreateTickets(
  $ticketType: MongoID!
  $ticketAssignments: [TicketAssignment!]!
) {
  createTickets(
    ticket_type: $ticketType
    ticket_assignments: $ticketAssignments
  ) {
    _id
  }
}
