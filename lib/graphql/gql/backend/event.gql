query GetEvent($id: MongoID, $shortid: String) {
  getEvent(_id: $id, shortid: $shortid) {
    _id
    title
    description
    approval_required
    start
    end
    shortid
    host
    cohosts
    host_expanded_new {
      _id
      name
      display_name
      email
      image_avatar
    }
    visible_cohosts_expanded_new {
      _id
      name
      display_name
      email
      image_avatar
    }
    cohosts_expanded_new {
      _id
      name
      display_name
      email
      image_avatar
    }
    accepted
    new_new_photos_expanded {
      _id
      stamp
      type
      url
      size
      bucket
      key
    }
    address {
      street_1
      city
      title
      region
      country
      additional_directions

      latitude
      longitude
    }
    address_directions
    subevent_enabled
    sessions {
      _id
      start
      end
      broadcast
      description
      title
      broadcast
      photos_expanded {
        _id
        key
        bucket
      }
      speaker_users
      speaker_users_expanded {
        ...User
      }
    }
    space
    space_expanded {
      _id
      title
      image_avatar
      image_avatar_expanded {
        _id
        bucket
        url
        type
        key
      }
    }
    timezone
    application_questions {
      _id
      question
      required
      position
      type
      options
      select_type
    }
    application_profile_fields {
      field
      required
      question
    }
    rsvp_wallet_platforms {
      platform
      required
    }
    calendar_links {
      google
      ical
      outlook
      yahoo
    }
    offers {
      _id
      provider
      provider_id
      provider_network
    }
    event_ticket_types {
      _id
      title
      offers {
        _id
        provider_network
        provider_id
        provider
      }
    }
    guest_limit
    terms_text
    virtual
    virtual_url
    theme_data
    url
    url_go
    external_url
    external_hostname
    published
    private

    payment_accounts_new
    payment_accounts_expanded {
      ...PaymentAccount
    }
  }
}

query GetEvents(
  $subeventParent: MongoID
  $skip: Int = 0
  $limit: Int = 100
  $id: [MongoID!]
  $site: MongoID
  $search: String
  $accepted: MongoID
  $highlight: Boolean
  $unpublished: Boolean
  $startFrom: DateTimeISO
  $startTo: DateTimeISO
  $endFrom: DateTimeISO
  $hostFilter: HostFilter
  $sort: EventSortInput
) {
  getEvents(
    subevent_parent: $subeventParent
    skip: $skip
    limit: $limit
    _id: $id
    site: $site
    search: $search
    accepted: $accepted
    highlight: $highlight
    unpublished: $unpublished
    start_from: $startFrom
    start_to: $startTo
    end_from: $endFrom
    host_filter: $hostFilter
    sort: $sort
  ) {
    _id
    shortid
    title
    host
    host_expanded_new {
      _id
      name
      image_avatar
    }
    cohosts
    cohosts_expanded_new {
      _id
      name
      image_avatar
    }
    new_new_photos_expanded(limit: 1) {
      _id
      key
      bucket
      url
      type
    }
    start
    end
    timezone
    event_ticket_types {
      _id
      title
      prices {
        cost
        currency
        default
        payment_accounts
        payment_accounts_expanded {
          ...PaymentAccount
        }
      }
    }
    broadcasts {
      provider_id
    }
    address {
      title
      city
      title
      region
      additional_directions
    }
    accepted
    sessions {
      _id
      broadcast
      description
      end
      speaker_users
      speaker_users_expanded {
        _id
        name
        new_photos_expanded(limit: 1) {
          _id
          key
          bucket
        }
      }
      start
      title
    }
    subevent_parent_expanded {
      _id
      shortid
      title
      slug
      start
      timezone
      new_new_photos_expanded(limit: 1) {
        _id
        key
        bucket
        type
        url
      }
      subevent_settings {
        ticket_required_for_creation
        ticket_required_for_purchase
      }
    }
  }
}

query GetUpcomingEvents(
  $user: MongoID!
  $limit: Int = 100
  $skip: Int = 0
  $host: Boolean
  $sort: JSON
  $site: MongoID
  $unpublished: Boolean
) {
  events: getUpcomingEvents(
    user: $user
    limit: $limit
    skip: $skip
    host: $host
    sort: $sort
    site: $site
    unpublished: $unpublished
  ) {
    _id
    shortid
    title
    slug
    host
    host_expanded_new {
      _id
      name
      new_photos_expanded {
        _id
        key
        bucket
      }
    }
    cohosts
    new_new_photos_expanded(limit: 1) {
      _id
      key
      bucket
      type
      url
    }
    start
    end
    timezone
    address {
      street_1
      city
      title
      region
    }
    tickets {
      _id
      accepted
      assigned_email
      assigned_to
      event
      invited_by
      type
    }
    me_awaiting_approval
    published
  }
}

query GetPastEvents(
  $user: MongoID!
  $limit: Int = 100
  $skip: Int = 0
  $sort: JSON
  $site: MongoID
  $host: Boolean
  $unpublished: Boolean
) {
  events: getPastEvents(
    user: $user
    limit: $limit
    skip: $skip
    sort: $sort
    site: $site
    host: $host
    unpublished: $unpublished
  ) {
    _id
    shortid
    title
    slug
    host
    host_expanded_new {
      _id
      name
      new_photos_expanded {
        _id
        key
        bucket
      }
    }
    cohosts
    new_new_photos_expanded(limit: 1) {
      _id
      key
      bucket
      type
      url
    }
    start
    end
    timezone
    address {
      street_1
      city
      title
      region
    }
    tickets {
      _id
      accepted
      assigned_email
      assigned_to
      event
      invited_by
      type
    }
    me_awaiting_approval
    published
  }
}

query getEventInvitation($event: MongoID!) {
  getEventInvitation(event: $event) {
    _id
    inviters
  }
}

query GetEventTicketTypes($input: GetEventTicketTypesInput!) {
  getEventTicketTypes(input: $input) {
    ticket_types {
      _id
      title
      default
      description
      event
      limited
      limit
      prices {
        cost
        currency
        default
        payment_accounts
        payment_accounts_expanded {
          ...PaymentAccount
        }
      }
      whitelisted
      photos_expanded(limit: 1) {
        _id
        key
        bucket
      }
      category
      category_expanded {
        _id
        description
        title
        position
      }
      position
    }
  }
}

query getMyEventJoinRequest($event: MongoID!) {
  getMyEventJoinRequest(event: $event) {
    _id
    created_at
    decided_at
    decided_by
    decided_by_expanded {
      _id
      display_name
      image_avatar
      username
      wallets
    }
    state
    payment {
      _id
      state
    }
    requested_tickets {
      count
      ticket_type
    }
    ticket_types_expanded {
      _id
      title
    }
  }
}

mutation acceptEvent($id: MongoID!, $email: String) {
  acceptEvent(_id: $id, email: $email) {
    state
  }
}

mutation SubmitEventApplicationAnswers($answers: [EventApplicationAnswerInput!]!, $event: MongoID!, $email: String) {
  submitEventApplicationAnswers(answers: $answers, event: $event, email: $email)
}

query PeekEventGuests($id: MongoID!, $limit: Int) {
  peekEventGuests(_id: $id, limit: $limit) {
    items {
      _id
      image_avatar
      name
      display_name
      first_name
    }
    total
  }
}

mutation UpdateEventTheme($id: MongoID!, $input: EventInput!) {
  updateEvent(_id: $id, input: $input) {
    _id
    theme_data
  }
}

query GetEventCohostInvites($input: GetEventCohostRequestsInput!) {
  getEventCohostInvites(input: $input) {
    event
    from_expanded {
      _id
      name
    }
  }
}

mutation DecideEventCohostRequest($input: DecideEventCohostRequestInput!) {
  decideEventCohostRequest(input: $input)
}

mutation createEvent($input: EventInput!) {
  createEvent(input: $input) {
    _id
    shortid
  }
}

mutation PublishEvent($event: MongoID!) {
  updateEvent(_id: $event, input: { published: true }) {
    _id
    published
  }
}

mutation UpdateEventSettings($id: MongoID!, $input: EventInput!) {
  updateEvent(_id: $id, input: $input) {
    _id
    title
    description
    theme_data
    address {
      street_1
      city
      title
      region
      country
      additional_directions
      latitude
      longitude
    }
    longitude
    latitude
    virtual_url
    registration_disabled
    guest_limit
    terms_text
    terms_link
    shortid
    private
  }
}

mutation UpdateEventPhotos($id: MongoID!, $new_new_photos: [MongoID!]) {
  updateEvent(_id: $id, input: { new_new_photos: $new_new_photos }) {
    new_new_photos
    new_new_photos_expanded(limit: 50) {
      _id
      key
      bucket
    }
  }
}

mutation inviteEvent($event: MongoID!, $users: [MongoID!], $emails: [String!], $custom_body_html: String) {
  inviteEvent(input: { _id: $event, users: $users, emails: $emails, custom_body_html: $custom_body_html }) {
    _id
    invited
  }
}

mutation AssignTickets($input: AssignTicketsInput!) {
  assignTickets(input: $input)
}

query GetEventTicketSales($event: MongoID!) {
  getEventTicketSales(event: $event) {
    sales {
      amount
      currency
      decimals
    }
    last_update
  }
}

query listEventTicketTypes($event: MongoID!) {
  listEventTicketTypes(event: $event) {
    limited_whitelist_users {
      _id
      email
    }
    _id
    active
    address_required
    default
    description
    description_line
    event
    external_ids
    limited
    offers {
      _id
      auto
      broadcast_rooms
      position
      provider
      provider_id
      provider_network
    }
    photos
    photos_expanded {
      _id
      bucket
      key
    }
    prices {
      cost
      currency
      default
      payment_accounts
      payment_accounts_expanded {
        ...PaymentAccount
      }
    }
    private
    ticket_count
    ticket_limit
    title
    ticket_limit_per
    category
    category_expanded {
      _id
      description
      title
      position
    }
    position
  }
}

query ListEventTokenGates($event: MongoID!, $ticketTypes: [MongoID!]) {
  listEventTokenGates(event: $event, ticket_types: $ticketTypes) {
    _id
    decimals
    event
    gated_ticket_types
    is_nft
    max_value
    min_value
    name
    network
    token_address
  }
}

mutation CreateEventTokenGate($input: EventTokenGateInput!) {
  createEventTokenGate(input: $input) {
    _id
  }
}

mutation UpdateEventTokenGate($input: EventTokenGateInput!) {
  updateEventTokenGate(input: $input) {
    _id
  }
}

mutation ManageEventCohostRequests($input: ManageEventCohostRequestsInput!) {
  manageEventCohostRequests(input: $input)
}

query GetEventInvitedStatistics($id: MongoID!, $statuses: [InvitationResponse!], $limit: Float) {
  getEventInvitedStatistics(_id: $id, statuses: $statuses, limit: $limit) {
    emails_opened
    guests {
      user
      pending
      joined
      email
      declined
      user_expanded {
        _id
        display_name
        new_photos_expanded(limit: 1) {
          _id
          key
          bucket
        }
      }
    }
    total
    total_declined
    total_joined
  }
}

mutation UpdateEventRegistrationForm($id: MongoID!, $input: EventInput!) {
  updateEvent(_id: $id, input: $input) {
    rsvp_wallet_platforms {
      platform
      required
    }
  }
}

query ListEventGuests($event: MongoID!, $skip: Int, $limit: Int, $search: String) {
  listEventGuests(event: $event, skip: $skip, limit: $limit, search: $search) {
    items {
      join_request {
        _id
        state
        non_login_user {
          _id
          display_name
          email
          image_avatar
          name
        }
        user_expanded {
          _id
          display_name
          email
          image_avatar
          name
        }
        metadata
      }
      ticket {
        _id
        created_at
        type_expanded {
          _id
          title
        }
        metadata
      }
      user {
        _id
        display_name
        email
        image_avatar
        name
      }
    }
    total
  }
}

query GetEventGuestDetailedInfo($event: MongoID!, $email: String) {
  getEventGuestDetailedInfo(event: $event, email: $email) {
    checkin_count
    purchased_tickets {
      _id
      type_expanded {
        _id
        title
      }
    }
    ticket {
      _id
      created_at
      type
      type_expanded {
        _id
        title
      }
    }
    user {
      _id
      description
      display_name
      email
      first_name
      image_avatar
      last_name
      name
    }
    payments {
      _id
      account_expanded {
        ...PaymentAccount
      }
      amount
      currency
      crypto_payment_info {
        network
        tx_hash
      }
      stripe_payment_info {
        card {
          brand
          last4
        }
        payment_intent
      }
      transfer_params
      formatted_total_amount
    }
    join_request {
      _id
      state
    }
    application {
      answer
      answers
      question
    }
  }
}

mutation submitEventApplicationQuestions($event: MongoID!, $questions: [QuestionInput!]!) {
  submitEventApplicationQuestions(event: $event, questions: $questions) {
    _id
    question
    required
    position
    type
    options
    select_type
  }
}

mutation updateEventApplicationProfiles($fields: [ApplicationProfileFieldInput!], $id: MongoID!) {
  updateEvent(input: { application_profile_fields: $fields }, _id: $id) {
    application_profile_fields {
      field
      required
      question
    }
  }
}

mutation decideUserJoinRequests($decision: EventJoinRequestState!, $event: MongoID!, $requests: [MongoID!]!) {
  decideUserJoinRequests(input: { decision: $decision, event: $event, requests: $requests }) {
    _id
    processed
  }
}

query getEventJoinRequests($event: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {
  getEventJoinRequests(event: $event, skip: $skip, limit: $limit, state: $state) {
    total
    records {
      _id
      state
      created_at
      email
      user
      user_expanded {
        _id
        name
        display_name
        new_photos_expanded(limit: 1) {
          _id
          key
          bucket
        }
      }
      non_login_user {
        _id
        name
        email
        display_name
        username
      }
    }
  }
}

query GetListEventEmailSettings($event: MongoID!, $system: Boolean, $sent: Boolean, $scheduled: Boolean) {
  listEventEmailSettings(event: $event, system: $system, sent: $sent, scheduled: $scheduled) {
    body_preview
    _id
    disabled
    is_system_email
    recipient_types
    recipients
    recipients_details {
      email
      image_avatar
    }
    owner_expanded {
      _id
      image_avatar
      new_photos_expanded(limit: 1) {
        _id
        key
        bucket
      }
    }
    recipient_filters {
      join_request_states
      ticket_types
    }
    scheduled_at
    sent_at
    subject_preview
    type
    custom_body_html
    custom_subject_html
    opened {
      email
      stamp
    }
  }
}

mutation UpdateEventEmailSetting($input: UpdateEventEmailSettingInput!) {
  updateEventEmailSetting(input: $input) {
    _id
    body_preview
    is_system_email
    disabled
    recipient_types
    recipients
    recipients_details {
      email
      image_avatar
    }
    recipient_filters {
      join_request_states
      ticket_types
    }
    owner_expanded {
      image_avatar
    }
    scheduled_at
    sent_at
    subject_preview
    type
    custom_body_html
    custom_subject_html
    template
  }
}

mutation CreateEventEmailSetting($input: CreateEventEmailSettingInput!) {
  createEventEmailSetting(input: $input) {
    _id
    body_preview
    cc
    custom_body_html
    context
    custom_subject_html
    disabled
    is_system_email
    recipient_types
    recipients
    recipients_details {
      email
      image_avatar
    }
    recipient_filters {
      join_request_states
      ticket_types
    }
    owner_expanded {
      image_avatar
    }
    scheduled_at
    sendgrid_template_id
    sent_at
    subject_preview
    template
    type
    opened {
      email
      stamp
    }
  }
}

mutation DeleteEventEmailSetting($id: MongoID!) {
  deleteEventEmailSetting(_id: $id)
}

mutation SendEventEmailSettingTestEmails($input: SendEventEmailSettingTestEmailsInput!) {
  sendEventEmailSettingTestEmails(input: $input)
}

mutation ToggleEventEmailSettings($disabled: Boolean!, $ids: [MongoID!]!, $event: MongoID!) {
  toggleEventEmailSettings(disabled: $disabled, ids: $ids, event: $event)
}

mutation UpdateEventToggleAttending($id: MongoID!, $input: EventInput!) {
  updateEvent(_id: $id, input: $input) {
    _id
    hide_attending
  }
}

query GetTickets(
  $event: MongoID
  $user: MongoID
  $ticket_types: [MongoID!]
  $email: String
) {
  getTickets(
    event: $event
    user: $user
    ticket_types: $ticket_types
    email: $email
  ) {
    _id
    accepted
    assigned_email
    assigned_to
    assigned_to_expanded {
      _id
      name
      new_photos_expanded(limit: 1) {
        _id
        key
        bucket
      }
    }
    event
    invited_by
    type
    shortid
  }
}

mutation CreatePoapDrop($input: CreatePoapInput!) {
  createPoapDrop(input: $input) {
    _id
    amount
    claim_count
    claim_mode
    description
    event
    image
    image_expanded {
      _id
      stamp
      type
      url
      size
      bucket
      key
    }
    image_url
    name
    private
    status
    ticket_types
    ticket_types_expanded {
      _id
      title
    }
  }
}

query ListPoapDrops($event: MongoID!) {
  listPoapDrops(event: $event) {
    _id
    amount
    claim_count
    claim_mode
    description
    event
    image
    image_expanded {
      _id
      stamp
      type
      url
      size
      bucket
      key
    }
    image_url
    name
    private
    status
    ticket_types
    ticket_types_expanded {
      _id
      title
    }
  }
}

query ListMyPoapClaims($event: MongoID) {
  listMyPoapClaims(event: $event) {
    drop {
      _id
    }
    claimed_date
  }
}

query getEventCheckInState($id: MongoID) {
  getEvent(_id: $id) {
    checkedin
  }
}

mutation ClaimPoap($wallet: String!, $drop: MongoID!) {
  claimPoap(wallet: $wallet, drop: $drop)
}

mutation UpdatePoapDrop($input: UpdatePoapInput!, $drop: MongoID!) {
  updatePoapDrop(input: $input, drop: $drop) {
    _id
    amount
    claim_count
    claim_mode
    description
    event
    image
    image_expanded {
      _id
      stamp
      type
      url
      size
      bucket
      key
    }
    image_url
    name
    private
    status
    ticket_types
    ticket_types_expanded {
      _id
      title
    }
  }
}

query GetPoapDropInfoById($getPoapDropInfoByIdId: Float!) {
  getPoapDropInfoById(id: $getPoapDropInfoByIdId) {
    description
    image_url
    name
  }
}

query CheckPoapDropEditCode($code: String!, $checkPoapDropEditCodeId: Int!) {
  checkPoapDropEditCode(code: $code, id: $checkPoapDropEditCodeId)
}

mutation ImportPoapDrop($input: ImportPoapInput!, $code: String!, $importPoapDropId: Float!) {
  importPoapDrop(input: $input, code: $code, id: $importPoapDropId) {
    _id
    amount
    claim_count
    claim_mode
    description
    event
    image
    image_expanded {
      _id
      stamp
      type
      url
      size
      bucket
      key
    }
    image_url
    name
    private
    status
    ticket_types
    ticket_types_expanded {
      _id
      title
    }
  }
}
