mutation createStripeCard($paymentMethod: String!) {
  createStripeCard(payment_method: $paymentMethod) {
    _id
    provider_id
  }
}

query getStripeCards {
  getStripeCards {
    _id
    active
    brand
    last4
    name
    provider_id
    stamp
    user
  }
}

mutation updatePayment($input: UpdatePaymentInput!) {
  updatePayment(input: $input) {
    _id
    transfer_metadata
    state
    failure_reason
  }
}

query getNewPayment($id: MongoID!, $paymentSecret: String) {
  getNewPayment(_id: $id, payment_secret: $paymentSecret) {
    _id
    due_amount
    amount
    currency
    ref_data
    state
    failure_reason
    account_expanded {
      _id
      type
      account_info {
        ... on EthereumEscrowAccount {
          currencies
          currency_map
          address
          network
          minimum_deposit_percent
          host_refund_percent
          refund_policies {
            percent
            timestamp
          }
        }
      }
    }
  }
}

query getPaymentRefundSignature($id: MongoID!) {
  getPaymentRefundSignature(_id: $id) {
    args
    signature
  }
}

mutation CancelPayment($input: CancelPaymentInput!) {
  cancelPayment(input: $input)
}

mutation GenerateStripeAccountLink($refreshUrl: String!, $returnUrl: String!) {
  generateStripeAccountLink(refresh_url: $refreshUrl, return_url: $returnUrl) {
    url
  }
}

query listNewPaymentAccounts($id: [MongoID!], $type: PaymentAccountType, $provider: NewPaymentProvider) {
  listNewPaymentAccounts(_id: $id, type: $type, provider: $provider) {
    _id
    account_info {
      ...AccountInfoFragment
    }
    active
    provider
    created_at
    type
    user
    title
  }
}

mutation updateEventPaymentAccounts(
  $id: MongoID!
  $payment_accounts_new: [MongoID!]
) {
  updateEvent(
    _id: $id
    input: { payment_accounts_new: $payment_accounts_new }
  ) {
    payment_accounts_new
    payment_accounts_expanded {
      ...PaymentAccount
    }
  }
}

