fragment Space on Space {
  _id
  title
  admins {
    _id
    image_avatar
  }
  description
  is_ambassador
  followed
  followers
  followers_count
  image_avatar
  image_avatar_expanded {
    _id
    bucket
    url
    type
    key
  }
  image_cover
  image_cover_expanded {
    _id
    bucket
    url
    type
    key
  }
  creator
  creator_expanded {
    _id
    name
    image_avatar
  }
  slug
  private
  listed_events
  website
  address {
    _id
    city
    country
    latitude
    longitude
    street_1
    street_2
    region
    title
  }
  handle_instagram
  handle_twitter
  handle_linkedin
  handle_youtube
  handle_tiktok
  personal
  theme_data
  sub_spaces
  lens_feed_id
  council_members {
    user {
      _id
      image_avatar
    }
    wallet
  }
}

fragment SpaceTagFragment on SpaceTag {
  _id
  color
  space
  tag
  targets
  type
}

fragment SpaceEventRequestFragment on SpaceEventRequest {
  _id
  created_at
  space
  event
  state
  decided_at
  decided_by
}

#### Queries

query GetSpaces($with_my_spaces: Boolean, $with_public_spaces: Boolean, $roles: [SpaceRole!], $featured: Boolean) {
  listSpaces(
    with_my_spaces: $with_my_spaces
    with_public_spaces: $with_public_spaces
    roles: $roles
    featured: $featured
  ) {
    ...Space
  }
}

query GetSpace($id: MongoID, $slug: String, $hostname: String) {
  getSpace(_id: $id, slug: $slug, hostname: $hostname) {
    ...Space
  }
}

query GetSpaceEvents(
  $skip: Int
  $limit: Int
  $startFrom: DateTimeISO
  $startTo: DateTimeISO
  $space: MongoID
  $sort: EventSortInput
  $endFrom: DateTimeISO
  $endTo: DateTimeISO
  $spaceTags: [MongoID!]
) {
  getEvents(
    skip: $skip
    limit: $limit
    start_from: $startFrom
    start_to: $startTo
    space: $space
    sort: $sort
    end_from: $endFrom
    end_to: $endTo
    space_tags: $spaceTags
  ) {
    _id
    shortid
    title
    host_expanded_new {
      _id
      image_avatar
      name
    }
    visible_cohosts_expanded_new {
      _id
      image_avatar
      name
    }
    address {
      city
      country
      region
      latitude
      longitude
    }
    new_new_photos_expanded {
      _id
      bucket
      key
      type
      url
    }
    published
    start
    end
    timezone
    external_url
    external_hostname
    event_ticket_types {
      _id
      prices {
        cost
        currency
        default
        payment_accounts
        payment_accounts_expanded {
          ...PaymentAccount
        }
      }
    }
    host_expanded_new {
      _id
      image_avatar
    }
    visible_cohosts_expanded_new {
      _id
      image_avatar
    }
  }
}

# NOTE: This will get all events of space to display on calendar
query GetSpaceEventsCalendar($space: MongoID) {
  getEvents(space: $space) {
    _id
    start
    address {
      _id
      latitude
      longitude
    }
  }
}

query GetSpaceTags($space: MongoID!) {
  listSpaceTags(space: $space) {
    ...SpaceTagFragment
  }
}

query GetSpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {
  getSpaceEventRequests(space: $space, skip: $skip, limit: $limit, state: $state) {
    records {
      _id
      created_at
      space
      event
      state
      decided_at
      decided_by
      event_expanded {
        title
        start
        address {
          city
          country
          region
        }
        new_new_photos_expanded {
          _id
          bucket
          key
          type
          url
        }
      }
    }
    total
  }
}

query GetMySpaceEventRequests($space: MongoID!, $skip: Int!, $limit: Int!, $state: EventJoinRequestState) {
  getMySpaceEventRequests(space: $space, skip: $skip, limit: $limit, state: $state) {
    records {
      _id
      state
      event_expanded {
        _id
        title
        new_new_photos_expanded {
          key
          bucket
          _id
          url
          type
        }
      }
    }
  }
}

query getSubSpaces($id: MongoID!) {
  getSubSpaces(_id: $id) {
    _id
    title
    description
    followers_count
    slug
    is_admin
    followed
    image_avatar_expanded {
      _id
      bucket
      url
      type
      key
    }
  }
}

query GetListSpaceCategories {
  listSpaceCategories {
    description
    image_url
    listed_events_count
    space
    title
  }
}

query GetListGeoRegions {
  listGeoRegions {
    _id
    title
    cities {
      name
      region
      space
      icon_url
      listed_events_count
    }
  }
}

query CheckSpaceSlug($slug: String!) {
  canUseSpaceSlug(slug: $slug)
}

#### Mutations

mutation FollowSpace($space: MongoID!) {
  followSpace(space: $space)
}

mutation UnfollowSpace($space: MongoID!) {
  unfollowSpace(space: $space)
}

mutation UpdateSpace($id: MongoID!, $input: SpaceInput!) {
  updateSpace(_id: $id, input: $input) {
    ...Space
  }
}

mutation PinEventsToSpace($space: MongoID!, $events: [MongoID!]!, $tags: [MongoID!]) {
  pinEventsToSpace(space: $space, events: $events, tags: $tags) {
    requests {
      ...SpaceEventRequestFragment
    }
  }
}

# NOTE: ONLY NEED _id -> call PinEventsToSpace
mutation CreateExternalEvent($input: EventInput!) {
  createEvent(input: $input) {
    _id
  }
}

mutation CreateSpace($input: SpaceInput!) {
  createSpace(input: $input) {
    ...Space
  }
}
