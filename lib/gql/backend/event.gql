query GetEvent($id: MongoID, $shortid: String) {
  getEvent(_id: $id, shortid: $shortid) {
    _id
    title
    description
    approval_required
    start
    end
    shortid
    host
    cohosts
    host_expanded {
      ...User
    }
    visible_cohosts_expanded {
      ...User
    }
    accepted
    new_new_photos_expanded {
      _id
      stamp
      type
      url
      size
      bucket
      key
    }
    address {
      street_1
      city
      title
      region
      country
      additional_directions

      latitude
      longitude
    }
    address_directions
    subevent_enabled
    sessions {
      _id
      start
      end
      broadcast
      description
      title
      broadcast
      photos_expanded {
        _id
        key
        bucket
      }
      speaker_users
      speaker_users_expanded {
        ...User
      }
    }
    space
    timezone
    application_questions {
      _id
      question
      required
      position
      type
      options
      select_type
    }
    application_profile_fields {
      field
      required
    }
  }
}

query GetEvents(
  $subeventParent: MongoID
  $skip: Int = 0
  $limit: Int = 100
  $id: [MongoID!]
  $site: MongoID
  $search: String
  $accepted: MongoID
  $highlight: Boolean
  $unpublished: Boolean
  $startFrom: DateTimeISO
  $startTo: DateTimeISO
  $endFrom: DateTimeISO
  $hostFilter: HostFilter
  $sort: EventSortInput
) {
  getEvents(
    subevent_parent: $subeventParent
    skip: $skip
    limit: $limit
    _id: $id
    site: $site
    search: $search
    accepted: $accepted
    highlight: $highlight
    unpublished: $unpublished
    start_from: $startFrom
    start_to: $startTo
    end_from: $endFrom
    host_filter: $hostFilter
    sort: $sort
  ) {
    _id
    shortid
    title
    host
    host_expanded {
      _id
      name
      new_photos_expanded(limit: 1) {
        _id
        key
        bucket
      }
    }
    cohosts
    cohosts_expanded {
      _id
      name
      new_photos_expanded(limit: 1) {
        _id
        key
        bucket
      }
    }
    new_new_photos_expanded(limit: 1) {
      _id
      key
      bucket
      url
      type
    }
    start
    end
    timezone
    event_ticket_types {
      _id
      prices {
        cost
        currency
        default
        payment_accounts
      }
    }
    broadcasts {
      provider_id
    }
    address {
      title
      city
      title
      region
      additional_directions
    }
    accepted
    sessions {
      _id
      broadcast
      description
      end
      speaker_users
      speaker_users_expanded {
        _id
        name
        new_photos_expanded(limit: 1) {
          _id
          key
          bucket
        }
      }
      start
      title
    }
    subevent_parent_expanded {
      _id
      shortid
      title
      slug
      start
      timezone
      new_new_photos_expanded(limit: 1) {
        _id
        key
        bucket
        type
        url
      }
      subevent_settings {
        ticket_required_for_creation
        ticket_required_for_purchase
      }
    }
  }
}

query getEventInvitation($event: MongoID!) {
  getEventInvitation(event: $event) {
    _id
    inviters
  }
}

query GetEventTicketTypes($input: GetEventTicketTypesInput!) {
  getEventTicketTypes(input: $input) {
    ticket_types {
      _id
      title
      default
      description
      event
      limited
      limit
      prices {
        cost
        currency
        default
        payment_accounts
        payment_accounts_expanded {
          ...PaymentAccount
        }
      }
      whitelisted
      photos_expanded(limit: 1) {
        _id
        key
        bucket
      }
      category
      category_expanded {
        _id
        description
        title
        position
      }
      position
    }
  }
}

query getMyEventJoinRequest($event: MongoID!) {
  getMyEventJoinRequest(event: $event) {
    _id
    created_at
    decided_at
    decided_by
    decided_by_expanded {
      _id
      display_name
      image_avatar
      username
      wallets
    }
    state
    payment {
      _id
      state
    }
    requested_tickets {
      count
      ticket_type
    }
    ticket_types_expanded {
      _id
      title
    }
  }
}

mutation acceptEvent($id: MongoID!, $email: String) {
  acceptEvent(_id: $id, email: $email) {
    state
  }
}

mutation SubmitEventApplicationAnswers($answers: [EventApplicationAnswerInput!]!, $event: MongoID!, $email: String) {
  submitEventApplicationAnswers(answers: $answers, event: $event, email: $email)
}
