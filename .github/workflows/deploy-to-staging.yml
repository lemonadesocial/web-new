name: Deploy to Staging
on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  APP_ENV: staging
  DOCKER_BUILDKIT: 1
  GITHUB_SHA: ${{ github.sha }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_ORG: lemonadesocial
  SENTRY_PROJECT: lemonade-web-new
  SENTRY_RELEASE: ${{ github.sha }}

jobs:
  buildAndPush:
    if: |
      github.event_name != 'push'
        || !startsWith(github.event.head_commit.message, 'chore(master): release')
    name: Build and push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ secrets.STAGING_REGION }}
          role-to-assume: ${{ secrets.STAGING_ROLE_TO_ASSUME }}

      - name: Generate .env file from GitHub variables
        run: |
          echo "NEXT_PUBLIC_ENABLE_WHITELABEL=${{ vars.STAGING_NEXT_PUBLIC_ENABLE_WHITELABEL }}" >> .env
          echo "NEXT_PUBLIC_GRAPHQL_URL=${{ vars.STAGING_NEXT_PUBLIC_GRAPHQL_URL }}" >> .env
          echo "NEXT_PUBLIC_METAVERSE_HTTP_URL=${{ vars.STAGING_NEXT_PUBLIC_METAVERSE_HTTP_URL }}" >> .env
          echo "NEXT_PUBLIC_AIRSTACK_URL=${{ vars.STAGING_NEXT_PUBLIC_AIRSTACK_URL }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_MAP_KEY=${{ vars.STAGING_NEXT_PUBLIC_GOOGLE_MAP_KEY }}" >> .env
          echo "NEXT_PUBLIC_LEMONADE_DOMAIN=${{ vars.STAGING_NEXT_PUBLIC_LEMONADE_DOMAIN }}" >> .env
          echo "NEXT_PUBLIC_KRATOS_PUBLIC_URL=${{ vars.STAGING_NEXT_PUBLIC_KRATOS_PUBLIC_URL }}" >> .env
          echo "NEXT_PUBLIC_IDENTITY_URL=${{ vars.STAGING_NEXT_PUBLIC_IDENTITY_URL }}" >> .env
          echo "NEXT_PUBLIC_ASSET_PREFIX=${{ vars.STAGING_NEXT_PUBLIC_ASSET_PREFIX }}" >> .env
          echo "NEXT_PUBLIC_REOWN_PROJECT_ID=${{ vars.STAGING_NEXT_PUBLIC_REOWN_PROJECT_ID }}" >> .env
          echo "NEXT_PUBLIC_HYDRA_PUBLIC_URL=${{ vars.STAGING_NEXT_PUBLIC_HYDRA_PUBLIC_URL }}" >> .env
          echo "NEXT_PUBLIC_LMD_BE=${{ vars.STAGING_NEXT_PUBLIC_HTTP_PUBLIC_URL }}" >> .env
          echo "NEXT_PUBLIC_IPFS_GATEWAY_URL=${{ vars.STAGING_NEXT_PUBLIC_IPFS_GATEWAY_URL }}" >> .env
          echo "NEXT_PUBLIC_WALLET_HTTP_URL=${{ vars.STAGING_NEXT_PUBLIC_WALLET_HTTP_URL }}" >> .env
          echo "NEXT_PUBLIC_WALLET_WSS_URL=${{ vars.STAGING_NEXT_PUBLIC_WALLET_WSS_URL }}" >> .env
          echo "NEXT_PUBLIC_HOST_URL=${{ vars.STAGING_NEXT_PUBLIC_HOST_URL }}" >> .env
          echo "NEXT_PUBLIC_APP_ENV=${{ vars.STAGING_NEXT_PUBLIC_APP_ENV }}" >> .env

      - name: Configure environment
        run: |
          aws ssm get-parameter --name ${{ secrets.STAGING_PARAMETER_NAME }} | jq '.Parameter.Value' | jq '. | fromjson' | jq -r 'to_entries | .[] | .key + "=" + .value' >> $GITHUB_ENV || exit 1
          echo //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }} >> .npmrc

      - name: Amazon ECR login
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Bake
        uses: docker/bake-action@v5.10.0
        with:
          files: docker-bake.hcl
          targets: builder,nginx,upload,app
          set: |
            builder.cache-from=type=registry,ref=${{ env.REPOSITORY_URI }}:release-builder
            builder.cache-to=type=inline
            builder.tags=${{ env.REPOSITORY_URI }}:release-builder
            builder.output=type=registry
            nginx.tags=${{ env.REPOSITORY_URI }}:${{ env.GITHUB_SHA }}-nginx
            nginx.tags=${{ env.REPOSITORY_URI }}:release-nginx
            nginx.output=type=registry
            app.tags=${{ env.REPOSITORY_URI }}:${{ env.GITHUB_SHA }}-app
            app.tags=${{ env.REPOSITORY_URI }}:release-app
            app.output=type=registry

  deploy:
    needs: buildAndPush
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.STAGING_REGION }}
          role-to-assume: ${{ secrets.STAGING_ROLE_TO_ASSUME }}

      - name: Configure environment
        run: |
          aws ssm get-parameter --name ${{ secrets.STAGING_PARAMETER_NAME }} | jq '.Parameter.Value' | jq '. | fromjson' | jq -r 'to_entries | .[] | .key + "=" + .value' >> $GITHUB_ENV || exit 1

      - name: Configure kube
        run: |
          eval $KUBECONFIG_COMMAND

      - name: Deploy
        run: |
          kubectl set image --namespace $NAMESPACE deployment/web-new web-new-app=$REPOSITORY_URI:$GITHUB_SHA-app web-new-nginx=$REPOSITORY_URI:$GITHUB_SHA-nginx

      - name: Verify
        run: |
          kubectl rollout status --namespace $NAMESPACE deployment/web-new
